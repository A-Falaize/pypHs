/*
    Copyright or (c) or Copr. Project-Team S3 (Sound Signals and Systems) and
    Analysis/Synthesis team, Laboratory of Sciences and Technologies of Music and
    Sound (UMR 9912), IRCAM-CNRS-UPMC, 1 place Igor Stravinsky, F-75004 Paris
    * contributors : Antoine Falaize, Thomas Helie,
    * corresponding contributor: antoine.falaize@ircam.fr
    * date: 2016/12/31 12:47:34

    This has been geerated by PyPHS which purpose is to generate C++
    code for the simulation of multiphysics system described by graph structures.

    This software is governed by the CeCILL-B license under French law and
    abiding by the rules of distribution of free software.  You can  use,
    modify and/ or redistribute the software under the terms of the CeCILL-B
    license as circulated by CEA, CNRS and INRIA at the following URL
    "http://www.cecill.info".

    As a counterpart to the access to the source code and  rights to copy,
    modify and redistribute granted by the license, users are provided only
    with a limited warranty  and the software's author,  the holder of the
    economic rights, and the successive licensors  have only  limited liability.

    In this respect, the user's attention is drawn to the risks associated
    with loading,  using,  modifying and/or developing or reproducing the
    software by the user in light of its specific status of free software,
    that may mean  that it is complicated to manipulate,  and  that  also
    therefore means  that it is reserved for developers  and  experienced
    professionals having in-depth computer knowledge. Users are therefore
    encouraged to load and test the software's suitability as regards their
    requirements in conditions enabling the security of their systems and/or
    data to be ensured and,  more generally, to use and operate it in the
    same conditions as regards security.

    The fact that you are presently reading this means that you have had
    knowledge of the CeCILL-B license and that you accept its terms.

    Created on 2016/12/31 12:47:34

    author: Antoine Falaize


===========================================================================

    This file was automatically generated by PyPHS, date 2017/04/16 12:14:17.

    It contains the code for the simulation of system 'CORE'.

===========================================================================
*/

#include "core.h"

// PUBLIC    
    
    void CORE::update(vector<double> & u_vec, vector<double> & p_vec){
    
        set_u(u_vec);
        set_p(p_vec);
        
        ud_x_update();
        set_x(_ud_x);
        jacFll_update();
        jacFnll_update();
        ijacFll_update();
        Gl_update();
        Gnl_update();
        Fnl_update();
        res_Fnl_update();
        
        unsigned int iter_res_Fnl = 0;
        _step_Fnl = 1;
        while ((iter_res_Fnl<10) & (res_Fnl()>1e-16) & (step_Fnl()>1e-16)){    
            save_Fnl_update();
            jacGlnl_update();
            jacGnlnl_update();
            jacFnl_update();
            ijacFnl_update();
            ud_vnl_update();
            set_vnl(_ud_vnl);
            Gl_update();
            Gnl_update();
            Fnl_update();
            res_Fnl_update();
            step_Fnl_update();iter_res_Fnl += 1;
        }
        
        ud_vl_update();
        set_vl(_ud_vl);
        dxH_update();
        z_update();
        y_update();
    }
    
    // Acessors to Arguments, return vector<double>
    
    
    vector<double> CORE::x_vector() const {    
        vector<double> v = vector<double>(12);    
        v[0] = *xbeamK4;    
        v[1] = *xbeamK3;    
        v[2] = *xbeamK2;    
        v[3] = *xbeamK1;    
        v[4] = *xbeamK0;    
        v[5] = *xbeamM0;    
        v[6] = *xbeamM1;    
        v[7] = *xbeamM2;    
        v[8] = *xbeamM3;    
        v[9] = *xbeamM4;    
        v[10] = *xmass;    
        v[11] = *qfelt;    
        return v;
    }
    
    vector<double> CORE::xl_vector() const {    
        vector<double> v = vector<double>(11);    
        v[0] = *xbeamK4;    
        v[1] = *xbeamK3;    
        v[2] = *xbeamK2;    
        v[3] = *xbeamK1;    
        v[4] = *xbeamK0;    
        v[5] = *xbeamM0;    
        v[6] = *xbeamM1;    
        v[7] = *xbeamM2;    
        v[8] = *xbeamM3;    
        v[9] = *xbeamM4;    
        v[10] = *xmass;    
        return v;
    }
    
    vector<double> CORE::xnl_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = *qfelt;    
        return v;
    }
    
    vector<double> CORE::dx_vector() const {    
        vector<double> v = vector<double>(12);    
        v[0] = *dxbeamK4;    
        v[1] = *dxbeamK3;    
        v[2] = *dxbeamK2;    
        v[3] = *dxbeamK1;    
        v[4] = *dxbeamK0;    
        v[5] = *dxbeamM0;    
        v[6] = *dxbeamM1;    
        v[7] = *dxbeamM2;    
        v[8] = *dxbeamM3;    
        v[9] = *dxbeamM4;    
        v[10] = *dxmass;    
        v[11] = *dqfelt;    
        return v;
    }
    
    vector<double> CORE::dxl_vector() const {    
        vector<double> v = vector<double>(11);    
        v[0] = *dxbeamK4;    
        v[1] = *dxbeamK3;    
        v[2] = *dxbeamK2;    
        v[3] = *dxbeamK1;    
        v[4] = *dxbeamK0;    
        v[5] = *dxbeamM0;    
        v[6] = *dxbeamM1;    
        v[7] = *dxbeamM2;    
        v[8] = *dxbeamM3;    
        v[9] = *dxbeamM4;    
        v[10] = *dxmass;    
        return v;
    }
    
    vector<double> CORE::dxnl_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = *dqfelt;    
        return v;
    }
    
    vector<double> CORE::w_vector() const {    
        vector<double> v = vector<double>(0);    
        return v;
    }
    
    vector<double> CORE::wl_vector() const {    
        vector<double> v = vector<double>(0);    
        return v;
    }
    
    vector<double> CORE::wnl_vector() const {    
        vector<double> v = vector<double>(0);    
        return v;
    }
    
    vector<double> CORE::u_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = *uinput;    
        return v;
    }
    
    vector<double> CORE::p_vector() const {    
        vector<double> v = vector<double>(0);    
        return v;
    }
    
    vector<double> CORE::v_vector() const {    
        vector<double> v = vector<double>(12);    
        v[0] = *dxbeamK4;    
        v[1] = *dxbeamK3;    
        v[2] = *dxbeamK2;    
        v[3] = *dxbeamK1;    
        v[4] = *dxbeamK0;    
        v[5] = *dxbeamM0;    
        v[6] = *dxbeamM1;    
        v[7] = *dxbeamM2;    
        v[8] = *dxbeamM3;    
        v[9] = *dxbeamM4;    
        v[10] = *dxmass;    
        v[11] = *dqfelt;    
        return v;
    }
    
    vector<double> CORE::vl_vector() const {    
        vector<double> v = vector<double>(11);    
        v[0] = *dxbeamK4;    
        v[1] = *dxbeamK3;    
        v[2] = *dxbeamK2;    
        v[3] = *dxbeamK1;    
        v[4] = *dxbeamK0;    
        v[5] = *dxbeamM0;    
        v[6] = *dxbeamM1;    
        v[7] = *dxbeamM2;    
        v[8] = *dxbeamM3;    
        v[9] = *dxbeamM4;    
        v[10] = *dxmass;    
        return v;
    }
    
    vector<double> CORE::vnl_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = *dqfelt;    
        return v;
    }
    
    // Acessors to Arguments, return Matrix<double, n, m>
    
    Matrix<double, 12, 1> CORE::x() const {    
        Matrix<double, 12, 1> m;    
        m(0, 0) = *xbeamK4;    
        m(1, 0) = *xbeamK3;    
        m(2, 0) = *xbeamK2;    
        m(3, 0) = *xbeamK1;    
        m(4, 0) = *xbeamK0;    
        m(5, 0) = *xbeamM0;    
        m(6, 0) = *xbeamM1;    
        m(7, 0) = *xbeamM2;    
        m(8, 0) = *xbeamM3;    
        m(9, 0) = *xbeamM4;    
        m(10, 0) = *xmass;    
        m(11, 0) = *qfelt;    
        return m;
    }
    Matrix<double, 11, 1> CORE::xl() const {    
        Matrix<double, 11, 1> m;    
        m(0, 0) = *xbeamK4;    
        m(1, 0) = *xbeamK3;    
        m(2, 0) = *xbeamK2;    
        m(3, 0) = *xbeamK1;    
        m(4, 0) = *xbeamK0;    
        m(5, 0) = *xbeamM0;    
        m(6, 0) = *xbeamM1;    
        m(7, 0) = *xbeamM2;    
        m(8, 0) = *xbeamM3;    
        m(9, 0) = *xbeamM4;    
        m(10, 0) = *xmass;    
        return m;
    }
    Matrix<double, 1, 1> CORE::xnl() const {    
        Matrix<double, 1, 1> m;    
        m(0, 0) = *qfelt;    
        return m;
    }
    Matrix<double, 12, 1> CORE::dx() const {    
        Matrix<double, 12, 1> m;    
        m(0, 0) = *dxbeamK4;    
        m(1, 0) = *dxbeamK3;    
        m(2, 0) = *dxbeamK2;    
        m(3, 0) = *dxbeamK1;    
        m(4, 0) = *dxbeamK0;    
        m(5, 0) = *dxbeamM0;    
        m(6, 0) = *dxbeamM1;    
        m(7, 0) = *dxbeamM2;    
        m(8, 0) = *dxbeamM3;    
        m(9, 0) = *dxbeamM4;    
        m(10, 0) = *dxmass;    
        m(11, 0) = *dqfelt;    
        return m;
    }
    Matrix<double, 11, 1> CORE::dxl() const {    
        Matrix<double, 11, 1> m;    
        m(0, 0) = *dxbeamK4;    
        m(1, 0) = *dxbeamK3;    
        m(2, 0) = *dxbeamK2;    
        m(3, 0) = *dxbeamK1;    
        m(4, 0) = *dxbeamK0;    
        m(5, 0) = *dxbeamM0;    
        m(6, 0) = *dxbeamM1;    
        m(7, 0) = *dxbeamM2;    
        m(8, 0) = *dxbeamM3;    
        m(9, 0) = *dxbeamM4;    
        m(10, 0) = *dxmass;    
        return m;
    }
    Matrix<double, 1, 1> CORE::dxnl() const {    
        Matrix<double, 1, 1> m;    
        m(0, 0) = *dqfelt;    
        return m;
    }
    Matrix<double, 0, 0> CORE::w() const {    
        Matrix<double, 0, 0> m;    
        return m;
    }
    Matrix<double, 0, 0> CORE::wl() const {    
        Matrix<double, 0, 0> m;    
        return m;
    }
    Matrix<double, 0, 0> CORE::wnl() const {    
        Matrix<double, 0, 0> m;    
        return m;
    }
    Matrix<double, 1, 1> CORE::u() const {    
        Matrix<double, 1, 1> m;    
        m(0, 0) = *uinput;    
        return m;
    }
    Matrix<double, 0, 0> CORE::p() const {    
        Matrix<double, 0, 0> m;    
        return m;
    }
    Matrix<double, 12, 1> CORE::v() const {    
        Matrix<double, 12, 1> m;    
        m(0, 0) = *dxbeamK4;    
        m(1, 0) = *dxbeamK3;    
        m(2, 0) = *dxbeamK2;    
        m(3, 0) = *dxbeamK1;    
        m(4, 0) = *dxbeamK0;    
        m(5, 0) = *dxbeamM0;    
        m(6, 0) = *dxbeamM1;    
        m(7, 0) = *dxbeamM2;    
        m(8, 0) = *dxbeamM3;    
        m(9, 0) = *dxbeamM4;    
        m(10, 0) = *dxmass;    
        m(11, 0) = *dqfelt;    
        return m;
    }
    Matrix<double, 11, 1> CORE::vl() const {    
        Matrix<double, 11, 1> m;    
        m(0, 0) = *dxbeamK4;    
        m(1, 0) = *dxbeamK3;    
        m(2, 0) = *dxbeamK2;    
        m(3, 0) = *dxbeamK1;    
        m(4, 0) = *dxbeamK0;    
        m(5, 0) = *dxbeamM0;    
        m(6, 0) = *dxbeamM1;    
        m(7, 0) = *dxbeamM2;    
        m(8, 0) = *dxbeamM3;    
        m(9, 0) = *dxbeamM4;    
        m(10, 0) = *dxmass;    
        return m;
    }
    Matrix<double, 1, 1> CORE::vnl() const {    
        Matrix<double, 1, 1> m;    
        m(0, 0) = *dqfelt;    
        return m;
    }
    
    // Mutators for Arguments, type = vector<double>
    
    void CORE::set_x(vector<double> & v) {
        *xbeamK4 = v[0];
        *xbeamK3 = v[1];
        *xbeamK2 = v[2];
        *xbeamK1 = v[3];
        *xbeamK0 = v[4];
        *xbeamM0 = v[5];
        *xbeamM1 = v[6];
        *xbeamM2 = v[7];
        *xbeamM3 = v[8];
        *xbeamM4 = v[9];
        *xmass = v[10];
        *qfelt = v[11];
    }
    void CORE::set_xl(vector<double> & v) {
        *xbeamK4 = v[0];
        *xbeamK3 = v[1];
        *xbeamK2 = v[2];
        *xbeamK1 = v[3];
        *xbeamK0 = v[4];
        *xbeamM0 = v[5];
        *xbeamM1 = v[6];
        *xbeamM2 = v[7];
        *xbeamM3 = v[8];
        *xbeamM4 = v[9];
        *xmass = v[10];
    }
    void CORE::set_xnl(vector<double> & v) {
        *qfelt = v[0];
    }
    void CORE::set_dx(vector<double> & v) {
        *dxbeamK4 = v[0];
        *dxbeamK3 = v[1];
        *dxbeamK2 = v[2];
        *dxbeamK1 = v[3];
        *dxbeamK0 = v[4];
        *dxbeamM0 = v[5];
        *dxbeamM1 = v[6];
        *dxbeamM2 = v[7];
        *dxbeamM3 = v[8];
        *dxbeamM4 = v[9];
        *dxmass = v[10];
        *dqfelt = v[11];
    }
    void CORE::set_dxl(vector<double> & v) {
        *dxbeamK4 = v[0];
        *dxbeamK3 = v[1];
        *dxbeamK2 = v[2];
        *dxbeamK1 = v[3];
        *dxbeamK0 = v[4];
        *dxbeamM0 = v[5];
        *dxbeamM1 = v[6];
        *dxbeamM2 = v[7];
        *dxbeamM3 = v[8];
        *dxbeamM4 = v[9];
        *dxmass = v[10];
    }
    void CORE::set_dxnl(vector<double> & v) {
        *dqfelt = v[0];
    }
    void CORE::set_w(vector<double> & v) {
    }
    void CORE::set_wl(vector<double> & v) {
    }
    void CORE::set_wnl(vector<double> & v) {
    }
    void CORE::set_u(vector<double> & v) {
        *uinput = v[0];
    }
    void CORE::set_p(vector<double> & v) {
    }
    void CORE::set_v(vector<double> & v) {
        *dxbeamK4 = v[0];
        *dxbeamK3 = v[1];
        *dxbeamK2 = v[2];
        *dxbeamK1 = v[3];
        *dxbeamK0 = v[4];
        *dxbeamM0 = v[5];
        *dxbeamM1 = v[6];
        *dxbeamM2 = v[7];
        *dxbeamM3 = v[8];
        *dxbeamM4 = v[9];
        *dxmass = v[10];
        *dqfelt = v[11];
    }
    void CORE::set_vl(vector<double> & v) {
        *dxbeamK4 = v[0];
        *dxbeamK3 = v[1];
        *dxbeamK2 = v[2];
        *dxbeamK1 = v[3];
        *dxbeamK0 = v[4];
        *dxbeamM0 = v[5];
        *dxbeamM1 = v[6];
        *dxbeamM2 = v[7];
        *dxbeamM3 = v[8];
        *dxbeamM4 = v[9];
        *dxmass = v[10];
    }
    void CORE::set_vnl(vector<double> & v) {
        *dqfelt = v[0];
    }
    
    // Mutators for Arguments, type = Matrix<double, n, m>
    
    void CORE::set_x(Matrix<double, 12, 1> & m) {
        *xbeamK4 = m(0, 0);
        *xbeamK3 = m(1, 0);
        *xbeamK2 = m(2, 0);
        *xbeamK1 = m(3, 0);
        *xbeamK0 = m(4, 0);
        *xbeamM0 = m(5, 0);
        *xbeamM1 = m(6, 0);
        *xbeamM2 = m(7, 0);
        *xbeamM3 = m(8, 0);
        *xbeamM4 = m(9, 0);
        *xmass = m(10, 0);
        *qfelt = m(11, 0);
    }
    void CORE::set_xl(Matrix<double, 11, 1> & m) {
        *xbeamK4 = m(0, 0);
        *xbeamK3 = m(1, 0);
        *xbeamK2 = m(2, 0);
        *xbeamK1 = m(3, 0);
        *xbeamK0 = m(4, 0);
        *xbeamM0 = m(5, 0);
        *xbeamM1 = m(6, 0);
        *xbeamM2 = m(7, 0);
        *xbeamM3 = m(8, 0);
        *xbeamM4 = m(9, 0);
        *xmass = m(10, 0);
    }
    void CORE::set_xnl(Matrix<double, 1, 1> & m) {
        *qfelt = m(0, 0);
    }
    void CORE::set_dx(Matrix<double, 12, 1> & m) {
        *dxbeamK4 = m(0, 0);
        *dxbeamK3 = m(1, 0);
        *dxbeamK2 = m(2, 0);
        *dxbeamK1 = m(3, 0);
        *dxbeamK0 = m(4, 0);
        *dxbeamM0 = m(5, 0);
        *dxbeamM1 = m(6, 0);
        *dxbeamM2 = m(7, 0);
        *dxbeamM3 = m(8, 0);
        *dxbeamM4 = m(9, 0);
        *dxmass = m(10, 0);
        *dqfelt = m(11, 0);
    }
    void CORE::set_dxl(Matrix<double, 11, 1> & m) {
        *dxbeamK4 = m(0, 0);
        *dxbeamK3 = m(1, 0);
        *dxbeamK2 = m(2, 0);
        *dxbeamK1 = m(3, 0);
        *dxbeamK0 = m(4, 0);
        *dxbeamM0 = m(5, 0);
        *dxbeamM1 = m(6, 0);
        *dxbeamM2 = m(7, 0);
        *dxbeamM3 = m(8, 0);
        *dxbeamM4 = m(9, 0);
        *dxmass = m(10, 0);
    }
    void CORE::set_dxnl(Matrix<double, 1, 1> & m) {
        *dqfelt = m(0, 0);
    }
    void CORE::set_w(Matrix<double, 0, 0> & m) {
    }
    void CORE::set_wl(Matrix<double, 0, 0> & m) {
    }
    void CORE::set_wnl(Matrix<double, 0, 0> & m) {
    }
    void CORE::set_u(Matrix<double, 1, 1> & m) {
        *uinput = m(0, 0);
    }
    void CORE::set_p(Matrix<double, 0, 0> & m) {
    }
    void CORE::set_v(Matrix<double, 12, 1> & m) {
        *dxbeamK4 = m(0, 0);
        *dxbeamK3 = m(1, 0);
        *dxbeamK2 = m(2, 0);
        *dxbeamK1 = m(3, 0);
        *dxbeamK0 = m(4, 0);
        *dxbeamM0 = m(5, 0);
        *dxbeamM1 = m(6, 0);
        *dxbeamM2 = m(7, 0);
        *dxbeamM3 = m(8, 0);
        *dxbeamM4 = m(9, 0);
        *dxmass = m(10, 0);
        *dqfelt = m(11, 0);
    }
    void CORE::set_vl(Matrix<double, 11, 1> & m) {
        *dxbeamK4 = m(0, 0);
        *dxbeamK3 = m(1, 0);
        *dxbeamK2 = m(2, 0);
        *dxbeamK1 = m(3, 0);
        *dxbeamK0 = m(4, 0);
        *dxbeamM0 = m(5, 0);
        *dxbeamM1 = m(6, 0);
        *dxbeamM2 = m(7, 0);
        *dxbeamM3 = m(8, 0);
        *dxbeamM4 = m(9, 0);
        *dxmass = m(10, 0);
    }
    void CORE::set_vnl(Matrix<double, 1, 1> & m) {
        *dqfelt = m(0, 0);
    }
    
    // Functions Results Accessors
    
    Matrix<double, 11, 11> CORE::jacFll() const {
        return _jacFll;
    }
    Matrix<double, 1, 11> CORE::jacFnll() const {
        return _jacFnll;
    }
    Matrix<double, 11, 1> CORE::Gl() const {
        return _Gl;
    }
    Matrix<double, 1, 1> CORE::Gnl() const {
        return _Gnl;
    }
    Matrix<double, 11, 1> CORE::jacGlnl() const {
        return _jacGlnl;
    }
    Matrix<double, 1, 1> CORE::jacGnlnl() const {
        return _jacGnlnl;
    }
    Matrix<double, 12, 1> CORE::dxH() const {
        return _dxH;
    }
    Matrix<double, 0, 0> CORE::z() const {
        return _z;
    }
    Matrix<double, 1, 1> CORE::y() const {
        return _y;
    }
    
    // Functions Results Accessors
    
    vector<double> CORE::jacFll_vector() const {    
        vector<double> v = vector<double>(11);    
        v[0] = _jacFll(0, 0);    
        v[1] = _jacFll(1, 0);    
        v[2] = _jacFll(2, 0);    
        v[3] = _jacFll(3, 0);    
        v[4] = _jacFll(4, 0);    
        v[5] = _jacFll(5, 0);    
        v[6] = _jacFll(6, 0);    
        v[7] = _jacFll(7, 0);    
        v[8] = _jacFll(8, 0);    
        v[9] = _jacFll(9, 0);    
        v[10] = _jacFll(10, 0);    
        return v;
    }
    vector<double> CORE::jacFnll_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = _jacFnll(0, 0);    
        return v;
    }
    vector<double> CORE::Gl_vector() const {    
        vector<double> v = vector<double>(11);    
        v[0] = _Gl(0, 0);    
        v[1] = _Gl(1, 0);    
        v[2] = _Gl(2, 0);    
        v[3] = _Gl(3, 0);    
        v[4] = _Gl(4, 0);    
        v[5] = _Gl(5, 0);    
        v[6] = _Gl(6, 0);    
        v[7] = _Gl(7, 0);    
        v[8] = _Gl(8, 0);    
        v[9] = _Gl(9, 0);    
        v[10] = _Gl(10, 0);    
        return v;
    }
    vector<double> CORE::Gnl_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = _Gnl(0, 0);    
        return v;
    }
    vector<double> CORE::jacGlnl_vector() const {    
        vector<double> v = vector<double>(11);    
        v[0] = _jacGlnl(0, 0);    
        v[1] = _jacGlnl(1, 0);    
        v[2] = _jacGlnl(2, 0);    
        v[3] = _jacGlnl(3, 0);    
        v[4] = _jacGlnl(4, 0);    
        v[5] = _jacGlnl(5, 0);    
        v[6] = _jacGlnl(6, 0);    
        v[7] = _jacGlnl(7, 0);    
        v[8] = _jacGlnl(8, 0);    
        v[9] = _jacGlnl(9, 0);    
        v[10] = _jacGlnl(10, 0);    
        return v;
    }
    vector<double> CORE::jacGnlnl_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = _jacGnlnl(0, 0);    
        return v;
    }
    vector<double> CORE::dxH_vector() const {    
        vector<double> v = vector<double>(12);    
        v[0] = _dxH(0, 0);    
        v[1] = _dxH(1, 0);    
        v[2] = _dxH(2, 0);    
        v[3] = _dxH(3, 0);    
        v[4] = _dxH(4, 0);    
        v[5] = _dxH(5, 0);    
        v[6] = _dxH(6, 0);    
        v[7] = _dxH(7, 0);    
        v[8] = _dxH(8, 0);    
        v[9] = _dxH(9, 0);    
        v[10] = _dxH(10, 0);    
        v[11] = _dxH(11, 0);    
        return v;
    }
    vector<double> CORE::z_vector() const {    
        vector<double> v = vector<double>(0);    
        return v;
    }
    vector<double> CORE::y_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = _y(0, 0);    
        return v;
    }
    
    // Oprations Results Accessors
    
    Matrix<double, 12, 1> CORE::ud_x() const {
        return _ud_x;
    }
    Matrix<double, 11, 11> CORE::ijacFll() const {
        return _ijacFll;
    }
    Matrix<double, 11, 1> CORE::ud_vl() const {
        return _ud_vl;
    }
    Matrix<double, 1, 1> CORE::save_Fnl() const {
        return _save_Fnl;
    }
    double CORE::res_Fnl() const {
        return _res_Fnl;
    }
    Matrix<double, 1, 1> CORE::Fnl() const {
        return _Fnl;
    }
    Matrix<double, 1, 1> CORE::jacFnl() const {
        return _jacFnl;
    }
    Matrix<double, 1, 1> CORE::ijacFnl() const {
        return _ijacFnl;
    }
    Matrix<double, 1, 1> CORE::ud_vnl() const {
        return _ud_vnl;
    }
    double CORE::step_Fnl() const {
        return _step_Fnl;
    }
    
    // Oprations Results Accessors
    
    vector<double> CORE::ud_x_vector() const {    
        vector<double> v = vector<double>(12);    
        v[0] = _ud_x(0, 0);    
        v[1] = _ud_x(1, 0);    
        v[2] = _ud_x(2, 0);    
        v[3] = _ud_x(3, 0);    
        v[4] = _ud_x(4, 0);    
        v[5] = _ud_x(5, 0);    
        v[6] = _ud_x(6, 0);    
        v[7] = _ud_x(7, 0);    
        v[8] = _ud_x(8, 0);    
        v[9] = _ud_x(9, 0);    
        v[10] = _ud_x(10, 0);    
        v[11] = _ud_x(11, 0);    
        return v;
    }
    vector<double> CORE::ud_vl_vector() const {    
        vector<double> v = vector<double>(11);    
        v[0] = _ud_vl(0, 0);    
        v[1] = _ud_vl(1, 0);    
        v[2] = _ud_vl(2, 0);    
        v[3] = _ud_vl(3, 0);    
        v[4] = _ud_vl(4, 0);    
        v[5] = _ud_vl(5, 0);    
        v[6] = _ud_vl(6, 0);    
        v[7] = _ud_vl(7, 0);    
        v[8] = _ud_vl(8, 0);    
        v[9] = _ud_vl(9, 0);    
        v[10] = _ud_vl(10, 0);    
        return v;
    }
    vector<double> CORE::save_Fnl_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = _save_Fnl(0, 0);    
        return v;
    }
    vector<double> CORE::Fnl_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = _Fnl(0, 0);    
        return v;
    }
    vector<double> CORE::ud_vnl_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = _ud_vnl(0, 0);    
        return v;
    }
    
    // Default Constructor
    
    CORE::CORE(){
        init();
    };
    
    // Constructor with vector state initalization
    
    CORE::CORE(vector<double> & x0){
    
        if (x().size() == x0.size()) {
            set_x(x0);
        }
        else {
            cerr << "Size of x0 does not match size of x" << endl;
            exit(1);
        }
        init();
    };
    
    // Constructor with matrix state initalization
    
    CORE::CORE(Matrix<double, 12, 1> & x0){
    set_x(x0);
        init();
    };
    
    // Default Destructor
    
    CORE::~CORE(){
    };


// PRIVATE    
    
    // Functions Results Updates
    
    void CORE::jacFll_update(){
    _jacFll(5, 5) = 48000.0 + 0.5*((*beamA0) + pow((*beamalpha0), 2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    )))/(*beamM0);
    _jacFll(6, 5) = 0.5*(*beamalpha0)*(*beamalpha1)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM0);
    _jacFll(7, 5) = 0.5*(*beamalpha0)*(*beamalpha2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM0);
    _jacFll(8, 5) = 0.5*(*beamalpha0)*(*beamalpha3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM0);
    _jacFll(9, 5) = 0.5*(*beamalpha0)*(*beamalpha4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM0);
    _jacFll(10, 5) = -0.5*(*beamalpha0)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM0);
    _jacFll(5, 6) = 0.5*(*beamalpha0)*(*beamalpha1)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM1);
    _jacFll(6, 6) = 48000.0 + 0.5*((*beamA1) + pow((*beamalpha1), 2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    )))/(*beamM1);
    _jacFll(7, 6) = 0.5*(*beamalpha1)*(*beamalpha2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM1);
    _jacFll(8, 6) = 0.5*(*beamalpha1)*(*beamalpha3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM1);
    _jacFll(9, 6) = 0.5*(*beamalpha1)*(*beamalpha4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM1);
    _jacFll(10, 6) = -0.5*(*beamalpha1)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM1);
    _jacFll(5, 7) = 0.5*(*beamalpha0)*(*beamalpha2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM2);
    _jacFll(6, 7) = 0.5*(*beamalpha1)*(*beamalpha2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM2);
    _jacFll(7, 7) = 48000.0 + 0.5*((*beamA2) + pow((*beamalpha2), 2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    )))/(*beamM2);
    _jacFll(8, 7) = 0.5*(*beamalpha2)*(*beamalpha3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM2);
    _jacFll(9, 7) = 0.5*(*beamalpha2)*(*beamalpha4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM2);
    _jacFll(10, 7) = -0.5*(*beamalpha2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM2);
    _jacFll(5, 8) = 0.5*(*beamalpha0)*(*beamalpha3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM3);
    _jacFll(6, 8) = 0.5*(*beamalpha1)*(*beamalpha3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM3);
    _jacFll(7, 8) = 0.5*(*beamalpha2)*(*beamalpha3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM3);
    _jacFll(8, 8) = 48000.0 + 0.5*((*beamA3) + pow((*beamalpha3), 2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    )))/(*beamM3);
    _jacFll(9, 8) = 0.5*(*beamalpha3)*(*beamalpha4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM3);
    _jacFll(10, 8) = -0.5*(*beamalpha3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM3);
    _jacFll(5, 9) = 0.5*(*beamalpha0)*(*beamalpha4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM4);
    _jacFll(6, 9) = 0.5*(*beamalpha1)*(*beamalpha4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM4);
    _jacFll(7, 9) = 0.5*(*beamalpha2)*(*beamalpha4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM4);
    _jacFll(8, 9) = 0.5*(*beamalpha3)*(*beamalpha4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM4);
    _jacFll(9, 9) = 48000.0 + 0.5*((*beamA4) + pow((*beamalpha4), 2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    )))/(*beamM4);
    _jacFll(10, 9) = -0.5*(*beamalpha4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*beamM4);
    _jacFll(5, 10) = -0.5*(*beamalpha0)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*M);
    _jacFll(6, 10) = -0.5*(*beamalpha1)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*M);
    _jacFll(7, 10) = -0.5*(*beamalpha2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*M);
    _jacFll(8, 10) = -0.5*(*beamalpha3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*M);
    _jacFll(9, 10) = -0.5*(*beamalpha4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*M);
    _jacFll(10, 10) = 48000.0 + 0.5*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))
    ))/(*M);
    };
    void CORE::jacFnll_update(){
    };
    void CORE::Gl_update(){
    _Gl(0, 0) = -41.0722433785536*(*xbeamM4);
    _Gl(1, 0) = -41.0722433785536*(*xbeamM3);
    _Gl(2, 0) = -41.0722433785536*(*xbeamM2);
    _Gl(3, 0) = -41.0722433785536*(*xbeamM1);
    _Gl(4, 0) = -41.0722433785536*(*xbeamM0);
    _Gl(5, 0) = -(*dxbeamM0)*(0.000360148196326462*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 48000.2053612169) + 48000.0*(*dxbeamM0) - 0.00172297262172598*(*dxbeamM1)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.00353912307598403*(*dxbeamM2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.00460427925171881*(*dxbeamM3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.00440792856746942*(*dxbeamM4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.0148059546216353*sqrt(2)*(*dxmass)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 2907.61765501279*(*xbeamK0) + 41.0722433785536*(0.5*(*dxbeamM0) + (*xbeamM0))*(1.75373033806338e-5*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.01) + 0.00344594524345196*(0.5*(*dxbeamM1) + (*xbeamM1))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.00707824615196806*(0.5*(*dxbeamM2) + (*xbeamM2))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.00920855850343763*(0.5*(*dxbeamM3) + (*xbeamM3))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.00881585713493883*(0.5*(*dxbeamM4) + (*xbeamM4))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.0296119092432705*sqrt(2)*(0.5*(*dxmass) + (*xmass))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.00296119092432705*sqrt(2)*(((*dqfelt) < -1.0e-16) ? (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       (((*qfelt) <= 0.0) ? (
          0
       )
       : (
          18144368465.0606*pow((*qfelt), 2.5)
       ))
    )
    : (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )));
    _Gl(6, 0) = -0.00172297262172598*(*dxbeamM0)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - (*dxbeamM1)*(0.00824281416788307*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 48000.3651896236) + 48000.0*(*dxbeamM1) - 0.0169313972054761*(*dxbeamM2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.0220271742977201*(*dxbeamM3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.021087819730157*(*dxbeamM4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.0708326591991888*sqrt(2)*(*dxmass)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 114193.561881173*(*xbeamK1) + 0.00344594524345196*(0.5*(*dxbeamM0) + (*xbeamM0))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 41.0722433785536*(0.5*(*dxbeamM1) + (*xbeamM1))*(0.000401381248738274*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.0177827941003892) + 0.0338627944109522*(0.5*(*dxbeamM2) + (*xbeamM2))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.0440543485954402*(0.5*(*dxbeamM3) + (*xbeamM3))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.042175639460314*(0.5*(*dxbeamM4) + (*xbeamM4))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.141665318398378*sqrt(2)*(0.5*(*dxmass) + (*xmass))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.0141665318398378*sqrt(2)*(((*dqfelt) < -1.0e-16) ? (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       (((*qfelt) <= 0.0) ? (
          0
       )
       : (
          18144368465.0606*pow((*qfelt), 2.5)
       ))
    )
    : (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )));
    _Gl(7, 0) = -0.00353912307598403*(*dxbeamM0)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.0169313972054761*(*dxbeamM1)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - (*dxbeamM2)*(0.0347784391945388*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 48000.6494091884) + 48000.0*(*dxbeamM2) - 0.0452455714459878*(*dxbeamM3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.0433160623030837*(*dxbeamM4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.145495926948647*sqrt(2)*(*dxmass)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 895296.15923433*(*xbeamK2) + 0.00707824615196806*(0.5*(*dxbeamM0) + (*xbeamM0))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.0338627944109522*(0.5*(*dxbeamM1) + (*xbeamM1))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 41.0722433785536*(0.5*(*dxbeamM2) + (*xbeamM2))*(0.00169352518069168*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.0316227766016838) + 0.0904911428919755*(0.5*(*dxbeamM3) + (*xbeamM3))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.0866321246061675*(0.5*(*dxbeamM4) + (*xbeamM4))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.290991853897294*sqrt(2)*(0.5*(*dxmass) + (*xmass))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.0290991853897294*sqrt(2)*(((*dqfelt) < -1.0e-16) ? (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       (((*qfelt) <= 0.0) ? (
          0
       )
       : (
          18144368465.0606*pow((*qfelt), 2.5)
       ))
    )
    : (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )));
    _Gl(8, 0) = -0.00460427925171881*(*dxbeamM0)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.0220271742977201*(*dxbeamM1)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.0452455714459878*(*dxbeamM2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - (*dxbeamM3)*(0.0588629559832416*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 48001.1548309885) + 48000.0*(*dxbeamM3) - 0.0563527299408188*(*dxbeamM4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.189285273011589*sqrt(2)*(*dxmass)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 3437969.17264858*(*xbeamK3) + 0.00920855850343763*(0.5*(*dxbeamM0) + (*xbeamM0))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.0440543485954402*(0.5*(*dxbeamM1) + (*xbeamM1))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.0904911428919755*(0.5*(*dxbeamM2) + (*xbeamM2))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 41.0722433785536*(0.5*(*dxbeamM3) + (*xbeamM3))*(0.00286631316632573*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.0562341325190349) + 0.112705459881638*(0.5*(*dxbeamM4) + (*xbeamM4))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.378570546023177*sqrt(2)*(0.5*(*dxmass) + (*xmass))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.0378570546023177*sqrt(2)*(((*dqfelt) < -1.0e-16) ? (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       (((*qfelt) <= 0.0) ? (
          0
       )
       : (
          18144368465.0606*pow((*qfelt), 2.5)
       ))
    )
    : (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )));
    _Gl(9, 0) = -0.00440792856746942*(*dxbeamM0)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.021087819730157*(*dxbeamM1)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.0433160623030837*(*dxbeamM2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.0563527299408188*(*dxbeamM3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - (*dxbeamM4)*(0.0539495531397873*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 48002.0536121689) + 48000.0*(*dxbeamM4) - 0.181213153393673*sqrt(2)*(*dxmass)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 9394754.28587921*(*xbeamK4) + 0.00881585713493883*(0.5*(*dxbeamM0) + (*xbeamM0))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.042175639460314*(0.5*(*dxbeamM1) + (*xbeamM1))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.0866321246061675*(0.5*(*dxbeamM2) + (*xbeamM2))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.112705459881638*(0.5*(*dxbeamM3) + (*xbeamM3))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 41.0722433785536*(0.5*(*dxbeamM4) + (*xbeamM4))*(0.00262705655703032*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.1) + 0.362426306787347*sqrt(2)*(0.5*(*dxmass) + (*xmass))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.0362426306787347*sqrt(2)*(((*dqfelt) < -1.0e-16) ? (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       (((*qfelt) <= 0.0) ? (
          0
       )
       : (
          18144368465.0606*pow((*qfelt), 2.5)
       ))
    )
    : (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )));
    _Gl(10, 0) = -0.0608113771671625*sqrt(2)*(*dxbeamM0)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.290925621777923*sqrt(2)*(*dxbeamM1)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.597584412222308*sqrt(2)*(*dxbeamM2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.777437080110794*sqrt(2)*(*dxbeamM3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - 0.744283073958013*sqrt(2)*(*dxbeamM4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) - (*dxmass)*(5.0*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 48000.0) + 48000.0*(*dxmass) + 1.0*(*uinput) + 0.121622754334325*sqrt(2)*(0.5*(*dxbeamM0) + (*xbeamM0))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 0.581851243555845*sqrt(2)*(0.5*(*dxbeamM1) + (*xbeamM1))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 1.19516882444462*sqrt(2)*(0.5*(*dxbeamM2) + (*xbeamM2))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 1.55487416022159*sqrt(2)*(0.5*(*dxbeamM3) + (*xbeamM3))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 1.48856614791603*sqrt(2)*(0.5*(*dxbeamM4) + (*xbeamM4))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 10.0*(0.5*(*dxmass) + (*xmass))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       0.0225*pow(33.3333333333333*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)/(1.25*(*dqfelt) + 2.5*(*qfelt))
    )) + 1.0*(((*dqfelt) < -1.0e-16) ? (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       (((*qfelt) <= 0.0) ? (
          0
       )
       : (
          18144368465.0606*pow((*qfelt), 2.5)
       ))
    )
    : (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )));
    };
    void CORE::Gnl_update(){
    _Gnl(0, 0) = 48000.0*(*dqfelt) + 0.0608113771671625*sqrt(2)*(*dxbeamM0) + 0.290925621777923*sqrt(2)*(*dxbeamM1) + 0.597584412222308*sqrt(2)*(*dxbeamM2) + 0.777437080110794*sqrt(2)*(*dxbeamM3) + 0.744283073958013*sqrt(2)*(*dxbeamM4) - 10.0*(*xmass) - 0.121622754334325*sqrt(2)*(0.5*(*dxbeamM0) + (*xbeamM0)) - 0.581851243555845*sqrt(2)*(0.5*(*dxbeamM1) + (*xbeamM1)) - 1.19516882444462*sqrt(2)*(0.5*(*dxbeamM2) + (*xbeamM2)) - 1.55487416022159*sqrt(2)*(0.5*(*dxbeamM3) + (*xbeamM3)) - 1.48856614791603*sqrt(2)*(0.5*(*dxbeamM4) + (*xbeamM4));
    };
    void CORE::jacGlnl_update(){
    _jacGlnl(5, 0) = -1.0*(*beamalpha0)*(((*dqfelt) < -1.0e-16) ? (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       0
    )
    : (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    ))) - 0.5*(*beamalpha0)*(*beamalpha4)*(*dxbeamM4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM4) + 1.0*(*beamalpha0)*(*beamalpha4)*(0.5*(*dxbeamM4) + (*xbeamM4))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM4) - 0.5*(*beamalpha0)*(*beamalpha3)*(*dxbeamM3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM3) + 1.0*(*beamalpha0)*(*beamalpha3)*(0.5*(*dxbeamM3) + (*xbeamM3))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM3) - 0.5*(*beamalpha0)*(*beamalpha2)*(*dxbeamM2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM2) + 1.0*(*beamalpha0)*(*beamalpha2)*(0.5*(*dxbeamM2) + (*xbeamM2))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM2) - 0.5*(*beamalpha0)*(*beamalpha1)*(*dxbeamM1)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM1) + 1.0*(*beamalpha0)*(*beamalpha1)*(0.5*(*dxbeamM1) + (*xbeamM1))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM1) - 0.5*pow((*beamalpha0), 2)*(*dxbeamM0)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM0) + 1.0*pow((*beamalpha0), 2)*(0.5*(*dxbeamM0) + (*xbeamM0))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM0) + 0.5*(*beamalpha0)*(*dxmass)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*M) - 1.0*(*beamalpha0)*(0.5*(*dxmass) + (*xmass))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*M);
    _jacGlnl(6, 0) = -1.0*(*beamalpha1)*(((*dqfelt) < -1.0e-16) ? (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       0
    )
    : (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    ))) - 0.5*(*beamalpha1)*(*beamalpha4)*(*dxbeamM4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM4) + 1.0*(*beamalpha1)*(*beamalpha4)*(0.5*(*dxbeamM4) + (*xbeamM4))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM4) - 0.5*(*beamalpha1)*(*beamalpha3)*(*dxbeamM3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM3) + 1.0*(*beamalpha1)*(*beamalpha3)*(0.5*(*dxbeamM3) + (*xbeamM3))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM3) - 0.5*(*beamalpha1)*(*beamalpha2)*(*dxbeamM2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM2) + 1.0*(*beamalpha1)*(*beamalpha2)*(0.5*(*dxbeamM2) + (*xbeamM2))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM2) - 0.5*pow((*beamalpha1), 2)*(*dxbeamM1)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM1) + 1.0*pow((*beamalpha1), 2)*(0.5*(*dxbeamM1) + (*xbeamM1))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM1) - 0.5*(*beamalpha0)*(*beamalpha1)*(*dxbeamM0)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM0) + 1.0*(*beamalpha0)*(*beamalpha1)*(0.5*(*dxbeamM0) + (*xbeamM0))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM0) + 0.5*(*beamalpha1)*(*dxmass)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*M) - 1.0*(*beamalpha1)*(0.5*(*dxmass) + (*xmass))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*M);
    _jacGlnl(7, 0) = -1.0*(*beamalpha2)*(((*dqfelt) < -1.0e-16) ? (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       0
    )
    : (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    ))) - 0.5*(*beamalpha2)*(*beamalpha4)*(*dxbeamM4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM4) + 1.0*(*beamalpha2)*(*beamalpha4)*(0.5*(*dxbeamM4) + (*xbeamM4))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM4) - 0.5*(*beamalpha2)*(*beamalpha3)*(*dxbeamM3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM3) + 1.0*(*beamalpha2)*(*beamalpha3)*(0.5*(*dxbeamM3) + (*xbeamM3))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM3) - 0.5*pow((*beamalpha2), 2)*(*dxbeamM2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM2) + 1.0*pow((*beamalpha2), 2)*(0.5*(*dxbeamM2) + (*xbeamM2))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM2) - 0.5*(*beamalpha1)*(*beamalpha2)*(*dxbeamM1)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM1) + 1.0*(*beamalpha1)*(*beamalpha2)*(0.5*(*dxbeamM1) + (*xbeamM1))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM1) - 0.5*(*beamalpha0)*(*beamalpha2)*(*dxbeamM0)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM0) + 1.0*(*beamalpha0)*(*beamalpha2)*(0.5*(*dxbeamM0) + (*xbeamM0))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM0) + 0.5*(*beamalpha2)*(*dxmass)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*M) - 1.0*(*beamalpha2)*(0.5*(*dxmass) + (*xmass))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*M);
    _jacGlnl(8, 0) = -1.0*(*beamalpha3)*(((*dqfelt) < -1.0e-16) ? (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       0
    )
    : (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    ))) - 0.5*(*beamalpha3)*(*beamalpha4)*(*dxbeamM4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM4) + 1.0*(*beamalpha3)*(*beamalpha4)*(0.5*(*dxbeamM4) + (*xbeamM4))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM4) - 0.5*pow((*beamalpha3), 2)*(*dxbeamM3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM3) + 1.0*pow((*beamalpha3), 2)*(0.5*(*dxbeamM3) + (*xbeamM3))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM3) - 0.5*(*beamalpha2)*(*beamalpha3)*(*dxbeamM2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM2) + 1.0*(*beamalpha2)*(*beamalpha3)*(0.5*(*dxbeamM2) + (*xbeamM2))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM2) - 0.5*(*beamalpha1)*(*beamalpha3)*(*dxbeamM1)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM1) + 1.0*(*beamalpha1)*(*beamalpha3)*(0.5*(*dxbeamM1) + (*xbeamM1))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM1) - 0.5*(*beamalpha0)*(*beamalpha3)*(*dxbeamM0)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM0) + 1.0*(*beamalpha0)*(*beamalpha3)*(0.5*(*dxbeamM0) + (*xbeamM0))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM0) + 0.5*(*beamalpha3)*(*dxmass)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*M) - 1.0*(*beamalpha3)*(0.5*(*dxmass) + (*xmass))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*M);
    _jacGlnl(9, 0) = -1.0*(*beamalpha4)*(((*dqfelt) < -1.0e-16) ? (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       0
    )
    : (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    ))) - 0.5*pow((*beamalpha4), 2)*(*dxbeamM4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM4) + 1.0*pow((*beamalpha4), 2)*(0.5*(*dxbeamM4) + (*xbeamM4))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM4) - 0.5*(*beamalpha3)*(*beamalpha4)*(*dxbeamM3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM3) + 1.0*(*beamalpha3)*(*beamalpha4)*(0.5*(*dxbeamM3) + (*xbeamM3))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM3) - 0.5*(*beamalpha2)*(*beamalpha4)*(*dxbeamM2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM2) + 1.0*(*beamalpha2)*(*beamalpha4)*(0.5*(*dxbeamM2) + (*xbeamM2))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM2) - 0.5*(*beamalpha1)*(*beamalpha4)*(*dxbeamM1)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM1) + 1.0*(*beamalpha1)*(*beamalpha4)*(0.5*(*dxbeamM1) + (*xbeamM1))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM1) - 0.5*(*beamalpha0)*(*beamalpha4)*(*dxbeamM0)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM0) + 1.0*(*beamalpha0)*(*beamalpha4)*(0.5*(*dxbeamM0) + (*xbeamM0))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM0) + 0.5*(*beamalpha4)*(*dxmass)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*M) - 1.0*(*beamalpha4)*(0.5*(*dxmass) + (*xmass))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*M);
    _jacGlnl(10, 0) = 1.0*(((*dqfelt) < -1.0e-16) ? (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       0
    )
    : (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    ))) + 0.5*(*beamalpha4)*(*dxbeamM4)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM4) - 1.0*(*beamalpha4)*(0.5*(*dxbeamM4) + (*xbeamM4))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM4) + 0.5*(*beamalpha3)*(*dxbeamM3)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM3) - 1.0*(*beamalpha3)*(0.5*(*dxbeamM3) + (*xbeamM3))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM3) + 0.5*(*beamalpha2)*(*dxbeamM2)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM2) - 1.0*(*beamalpha2)*(0.5*(*dxbeamM2) + (*xbeamM2))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM2) + 0.5*(*beamalpha1)*(*dxbeamM1)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM1) - 1.0*(*beamalpha1)*(0.5*(*dxbeamM1) + (*xbeamM1))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM1) + 0.5*(*beamalpha0)*(*dxbeamM0)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM0) - 1.0*(*beamalpha0)*(0.5*(*dxbeamM0) + (*xbeamM0))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*beamM0) - 0.5*(*dxmass)*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*M) + 1.0*(0.5*(*dxmass) + (*xmass))*((0.5*(*dqfelt) + (*qfelt) <= 0.0) ? (
       0
    )
    : (
       -0.5*(*A)*(*B)*pow((*L), 2)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/pow(0.5*(*B)*(*dqfelt) + (*B)*(*qfelt), 2) + 0.5*(*A)*(*B)*(*L)*pow(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((0.5*(*B)*(*dqfelt) + (*B)*(*qfelt))*(0.5*(*dqfelt)/(*L) + (*qfelt)/(*L)))
    ))/(*M);
    };
    void CORE::jacGnlnl_update(){
    };
    void CORE::dxH_update(){
    _dxH(0, 0) = 4697377.1429396*(*dxbeamK4) + 9394754.28587921*(*xbeamK4);
    _dxH(1, 0) = 1718984.58632429*(*dxbeamK3) + 3437969.17264858*(*xbeamK3);
    _dxH(2, 0) = 447648.079617165*(*dxbeamK2) + 895296.15923433*(*xbeamK2);
    _dxH(3, 0) = 57096.7809405863*(*dxbeamK1) + 114193.561881173*(*xbeamK1);
    _dxH(4, 0) = 1453.80882750639*(*dxbeamK0) + 2907.61765501279*(*xbeamK0);
    _dxH(5, 0) = 20.5361216892768*(*dxbeamM0) + 41.0722433785536*(*xbeamM0);
    _dxH(6, 0) = 20.5361216892768*(*dxbeamM1) + 41.0722433785536*(*xbeamM1);
    _dxH(7, 0) = 20.5361216892768*(*dxbeamM2) + 41.0722433785536*(*xbeamM2);
    _dxH(8, 0) = 20.5361216892768*(*dxbeamM3) + 41.0722433785536*(*xbeamM3);
    _dxH(9, 0) = 20.5361216892768*(*dxbeamM4) + 41.0722433785536*(*xbeamM4);
    _dxH(10, 0) = 5.0*(*dxmass) + 10.0*(*xmass);
    _dxH(11, 0) = (((*dqfelt) < -1.0e-16) ? (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       (((*qfelt) <= 0.0) ? (
          0
       )
       : (
          18144368465.0606*pow((*qfelt), 2.5)
       ))
    )
    : (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )));
    };
    void CORE::z_update(){
    };
    void CORE::y_update(){
    _y(0, 0) = 5.0*(*dxmass) + 10.0*(*xmass);
    };
    
    // Oprations Results Updates
    
    void CORE::ud_x_update(){
        _ud_x = (x()) + (dx());
    };
    void CORE::ijacFll_update(){
        _ijacFll = (jacFll()).inverse();
    };
    void CORE::ud_vl_update(){
        _ud_vl = (ijacFll())*((-1.0)*(Gl()));
    };
    void CORE::save_Fnl_update(){
        _save_Fnl = Fnl();
    };
    void CORE::res_Fnl_update(){
        _res_Fnl = sqrt((Fnl()).dot(Fnl()));
    };
    void CORE::Fnl_update(){
        _Fnl = (Gnl()) + ((jacFnll())*((ijacFll())*((-1)*(Gl()))));
    };
    void CORE::jacFnl_update(){
        _jacFnl = (jacGnlnl()) + ((jacFnll())*((ijacFll())*((-1)*(jacGlnl()))));
    };
    void CORE::ijacFnl_update(){
        _ijacFnl = (jacFnl()).inverse();
    };
    void CORE::ud_vnl_update(){
        _ud_vnl = (vnl()) + ((-1.0)*((ijacFnl())*(Fnl())));
    };
    void CORE::step_Fnl_update(){
        _step_Fnl = sqrt(((Fnl()) + ((-1.0)*(save_Fnl()))).dot((Fnl()) + ((-1.0)*(save_Fnl()))));
    };
    
    // Initialization
    
    void CORE::init(){
        
        
        // Functions Results Initialisation Data
        double jacFll_data[] = {48000.0000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0.5*(*beamK4), 0, 0, 48000.0000000000, 0, 0, 0, 0, 0, 0, 0.5*(*beamK3), 0, 0, 0, 0, 48000.0000000000, 0, 0, 0, 0, 0.5*(*beamK2), 0, 0, 0, 0, 0, 0, 48000.0000000000, 0, 0, 0.5*(*beamK1), 0, 0, 0, 0, 0, 0, 0, 0, 48000.0000000000, 0.5*(*beamK0), 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.5/(*beamM0), 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.5/(*beamM1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.5/(*beamM2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.5/(*beamM3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.5/(*beamM4), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        double jacFnll_data[] = {0, 0, 0, 0, 0, 0.5*(*beamalpha0)/(*beamM0), 0.5*(*beamalpha1)/(*beamM1), 0.5*(*beamalpha2)/(*beamM2), 0.5*(*beamalpha3)/(*beamM3), 0.5*(*beamalpha4)/(*beamM4), -0.5/(*M)};
        double Gl_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        double Gnl_data[] = {0};
        double jacGlnl_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        double jacGnlnl_data[] = {48000.0000000000};
        double dxH_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        double z_data[] = {};
        double y_data[] = {0};
        
        // Oprations Results Initialisation Data
        double ud_x_data[] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
        double ijacFll_data[] = {1.99961525599e-05, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.00195678023987, 0.0, 0.0, 2.05189549143e-05, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.000734810805062, -0.0, 0.0, 0.0, 0.0, 2.07505398406e-05, 0.0, 0.0, 0.0, -0.0, -0.000193516950812, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 2.08227363543e-05, 0.0, 0.0, -2.47687952271e-05, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.08330633764e-05, -6.30982538776e-07, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.91309363029e-09, 2.08329742454e-05, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 8.90864571523e-09, 0.0, 0.0, 2.08225779337e-05, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 8.87770512545e-09, 0.0, 0.0, 0.0, -0.0, 2.07502591029e-05, -0.0, -0.0, 0.0, 0.0, 8.77853369448e-09, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 2.05184612611e-05, -0.0, 0.0, 8.55470529667e-09, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.99952970894e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 2.08333333333e-05};
        double ud_vl_data[] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
        double save_Fnl_data[] = {0.0};
        double res_Fnl_data = 0.;
        double Fnl_data[] = {0.0};
        double jacFnl_data[] = {48000.0};
        double ijacFnl_data[] = {2.08333333333e-05};
        double ud_vnl_data[] = {0.0};
        double step_Fnl_data = 0.;    
        
        // Functions Results Initialisation
        
        _jacFll = Map<Matrix<double, 11, 11>> (jacFll_data);
        _jacFnll = Map<Matrix<double, 1, 11>> (jacFnll_data);
        _Gl = Map<Matrix<double, 11, 1>> (Gl_data);
        _Gnl = Map<Matrix<double, 1, 1>> (Gnl_data);
        _jacGlnl = Map<Matrix<double, 11, 1>> (jacGlnl_data);
        _jacGnlnl = Map<Matrix<double, 1, 1>> (jacGnlnl_data);
        _dxH = Map<Matrix<double, 12, 1>> (dxH_data);
        _z = Map<Matrix<double, 0, 0>> (z_data);
        _y = Map<Matrix<double, 1, 1>> (y_data);
        
        // Operations Results Initialisation
        
        _ud_x = Map<Matrix<double, 12, 1>> (ud_x_data);
        _ijacFll = Map<Matrix<double, 11, 11>> (ijacFll_data);
        _ud_vl = Map<Matrix<double, 11, 1>> (ud_vl_data);
        _save_Fnl = Map<Matrix<double, 1, 1>> (save_Fnl_data);
        _res_Fnl = res_Fnl_data;
        _Fnl = Map<Matrix<double, 1, 1>> (Fnl_data);
        _jacFnl = Map<Matrix<double, 1, 1>> (jacFnl_data);
        _ijacFnl = Map<Matrix<double, 1, 1>> (ijacFnl_data);
        _ud_vnl = Map<Matrix<double, 1, 1>> (ud_vnl_data);
        _step_Fnl = step_Fnl_data;
    };