/*
    Copyright or (c) or Copr. Project-Team S3 (Sound Signals and Systems) and
    Analysis/Synthesis team, Laboratory of Sciences and Technologies of Music and
    Sound (UMR 9912), IRCAM-CNRS-UPMC, 1 place Igor Stravinsky, F-75004 Paris
    * contributors : Antoine Falaize, Thomas Helie,
    * corresponding contributor: antoine.falaize@ircam.fr
    * date: 2016/12/31 12:47:34

    This has been geerated by PyPHS which purpose is to generate C++
    code for the simulation of multiphysics system described by graph structures.

    This software is governed by the CeCILL-B license under French law and
    abiding by the rules of distribution of free software.  You can  use,
    modify and/ or redistribute the software under the terms of the CeCILL-B
    license as circulated by CEA, CNRS and INRIA at the following URL
    "http://www.cecill.info".

    As a counterpart to the access to the source code and  rights to copy,
    modify and redistribute granted by the license, users are provided only
    with a limited warranty  and the software's author,  the holder of the
    economic rights, and the successive licensors  have only  limited liability.

    In this respect, the user's attention is drawn to the risks associated
    with loading,  using,  modifying and/or developing or reproducing the
    software by the user in light of its specific status of free software,
    that may mean  that it is complicated to manipulate,  and  that  also
    therefore means  that it is reserved for developers  and  experienced
    professionals having in-depth computer knowledge. Users are therefore
    encouraged to load and test the software's suitability as regards their
    requirements in conditions enabling the security of their systems and/or
    data to be ensured and,  more generally, to use and operate it in the
    same conditions as regards security.

    The fact that you are presently reading this means that you have had
    knowledge of the CeCILL-B license and that you accept its terms.

    Created on 2016/12/31 12:47:34

    author: Antoine Falaize


===========================================================================

    This file was automatically generated by PyPHS, date 2017/03/12 23:31:54.

    It contains the code for the simulation of system 'CORE'.

===========================================================================
*/

#include "core.h"

// PUBLIC    
    
    void CORE::update(vector<double> & u_vec, vector<double> & p_vec){
    
        set_u(u_vec);
        set_p(p_vec);
        
        ud_x_update();
        set_x(_ud_x);
        jacFll_update();
        jacFnll_update();
        ijacFll_update();
        Gl_update();
        Gnl_update();
        ud_Fnl_update();
        set_Fnl(_ud_Fnl);
        res_Fnl_update();
        
        unsigned int iter_res_Fnl = 0;
        _step_Fnl = 1;
        while ((iter_res_Fnl<100) & (res_Fnl()>2.22044604925e-16) & (step_Fnl()>2.22044604925e-16)){    
            save_Fnl_update();
            jacGlnl_update();
            jacGnlnl_update();
            jacFnl_update();
            ijacFnl_update();
            ud_vnl_update();
            set_vnl(_ud_vnl);
            Gl_update();
            Gnl_update();
            ud_Fnl_update();
            set_Fnl(_ud_Fnl);
            res_Fnl_update();
            step_Fnl_update();iter_res_Fnl += 1;
        }
        
        ud_vl_update();
        set_vl(_ud_vl);
        dxH_update();
        z_update();
        y_update();
    }
    
    // Acessors to Arguments, return vector<double>
    
    
    vector<double> CORE::x_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = *xL;    
        v[1] = *xC;    
        return v;
    }
    
    vector<double> CORE::xl_vector() const {    
        vector<double> v = vector<double>(0);    
        return v;
    }
    
    vector<double> CORE::xnl_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = *xL;    
        v[1] = *xC;    
        return v;
    }
    
    vector<double> CORE::dx_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = *dxL;    
        v[1] = *dxC;    
        return v;
    }
    
    vector<double> CORE::dxl_vector() const {    
        vector<double> v = vector<double>(0);    
        return v;
    }
    
    vector<double> CORE::dxnl_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = *dxL;    
        v[1] = *dxC;    
        return v;
    }
    
    vector<double> CORE::w_vector() const {    
        vector<double> v = vector<double>(3);    
        v[0] = *wD_R;    
        v[1] = *wD_gmin;    
        v[2] = *wD;    
        return v;
    }
    
    vector<double> CORE::wl_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = *wD_R;    
        v[1] = *wD_gmin;    
        return v;
    }
    
    vector<double> CORE::wnl_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = *wD;    
        return v;
    }
    
    vector<double> CORE::u_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = *uIN;    
        return v;
    }
    
    vector<double> CORE::p_vector() const {    
        vector<double> v = vector<double>(0);    
        return v;
    }
    
    vector<double> CORE::v_vector() const {    
        vector<double> v = vector<double>(5);    
        v[0] = *dxL;    
        v[1] = *dxC;    
        v[2] = *wD_R;    
        v[3] = *wD_gmin;    
        v[4] = *wD;    
        return v;
    }
    
    vector<double> CORE::vl_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = *wD_R;    
        v[1] = *wD_gmin;    
        return v;
    }
    
    vector<double> CORE::vnl_vector() const {    
        vector<double> v = vector<double>(3);    
        v[0] = *dxL;    
        v[1] = *dxC;    
        v[2] = *wD;    
        return v;
    }
    
    // Acessors to Arguments, return Matrix<double, n, m>
    
    Matrix<double, 2, 1> CORE::x() const {    
        Matrix<double, 2, 1> m;    
        m(0, 0) = *xL;    
        m(1, 0) = *xC;    
        return m;
    }
    Matrix<double, 0, 1> CORE::xl() const {    
        Matrix<double, 0, 1> m;    
        return m;
    }
    Matrix<double, 2, 1> CORE::xnl() const {    
        Matrix<double, 2, 1> m;    
        m(0, 0) = *xL;    
        m(1, 0) = *xC;    
        return m;
    }
    Matrix<double, 2, 1> CORE::dx() const {    
        Matrix<double, 2, 1> m;    
        m(0, 0) = *dxL;    
        m(1, 0) = *dxC;    
        return m;
    }
    Matrix<double, 0, 1> CORE::dxl() const {    
        Matrix<double, 0, 1> m;    
        return m;
    }
    Matrix<double, 2, 1> CORE::dxnl() const {    
        Matrix<double, 2, 1> m;    
        m(0, 0) = *dxL;    
        m(1, 0) = *dxC;    
        return m;
    }
    Matrix<double, 3, 1> CORE::w() const {    
        Matrix<double, 3, 1> m;    
        m(0, 0) = *wD_R;    
        m(1, 0) = *wD_gmin;    
        m(2, 0) = *wD;    
        return m;
    }
    Matrix<double, 2, 1> CORE::wl() const {    
        Matrix<double, 2, 1> m;    
        m(0, 0) = *wD_R;    
        m(1, 0) = *wD_gmin;    
        return m;
    }
    Matrix<double, 1, 1> CORE::wnl() const {    
        Matrix<double, 1, 1> m;    
        m(0, 0) = *wD;    
        return m;
    }
    Matrix<double, 1, 1> CORE::u() const {    
        Matrix<double, 1, 1> m;    
        m(0, 0) = *uIN;    
        return m;
    }
    Matrix<double, 0, 1> CORE::p() const {    
        Matrix<double, 0, 1> m;    
        return m;
    }
    Matrix<double, 5, 1> CORE::v() const {    
        Matrix<double, 5, 1> m;    
        m(0, 0) = *dxL;    
        m(1, 0) = *dxC;    
        m(2, 0) = *wD_R;    
        m(3, 0) = *wD_gmin;    
        m(4, 0) = *wD;    
        return m;
    }
    Matrix<double, 2, 1> CORE::vl() const {    
        Matrix<double, 2, 1> m;    
        m(0, 0) = *wD_R;    
        m(1, 0) = *wD_gmin;    
        return m;
    }
    Matrix<double, 3, 1> CORE::vnl() const {    
        Matrix<double, 3, 1> m;    
        m(0, 0) = *dxL;    
        m(1, 0) = *dxC;    
        m(2, 0) = *wD;    
        return m;
    }
    
    // Mutators for Arguments, type = vector<double>
    
    void CORE::set_x(vector<double> & v) {
        *xL = v[0];
        *xC = v[1];
    }
    void CORE::set_xl(vector<double> & v) {
    }
    void CORE::set_xnl(vector<double> & v) {
        *xL = v[0];
        *xC = v[1];
    }
    void CORE::set_dx(vector<double> & v) {
        *dxL = v[0];
        *dxC = v[1];
    }
    void CORE::set_dxl(vector<double> & v) {
    }
    void CORE::set_dxnl(vector<double> & v) {
        *dxL = v[0];
        *dxC = v[1];
    }
    void CORE::set_w(vector<double> & v) {
        *wD_R = v[0];
        *wD_gmin = v[1];
        *wD = v[2];
    }
    void CORE::set_wl(vector<double> & v) {
        *wD_R = v[0];
        *wD_gmin = v[1];
    }
    void CORE::set_wnl(vector<double> & v) {
        *wD = v[0];
    }
    void CORE::set_u(vector<double> & v) {
        *uIN = v[0];
    }
    void CORE::set_p(vector<double> & v) {
    }
    void CORE::set_v(vector<double> & v) {
        *dxL = v[0];
        *dxC = v[1];
        *wD_R = v[2];
        *wD_gmin = v[3];
        *wD = v[4];
    }
    void CORE::set_vl(vector<double> & v) {
        *wD_R = v[0];
        *wD_gmin = v[1];
    }
    void CORE::set_vnl(vector<double> & v) {
        *dxL = v[0];
        *dxC = v[1];
        *wD = v[2];
    }
    
    // Mutators for Arguments, type = Matrix<double, n, m>
    
    void CORE::set_x(Matrix<double, 2, 1> & m) {
        *xL = m(0, 0);
        *xC = m(1, 0);
    }
    void CORE::set_xl(Matrix<double, 0, 1> & m) {
    }
    void CORE::set_xnl(Matrix<double, 2, 1> & m) {
        *xL = m(0, 0);
        *xC = m(1, 0);
    }
    void CORE::set_dx(Matrix<double, 2, 1> & m) {
        *dxL = m(0, 0);
        *dxC = m(1, 0);
    }
    void CORE::set_dxl(Matrix<double, 0, 1> & m) {
    }
    void CORE::set_dxnl(Matrix<double, 2, 1> & m) {
        *dxL = m(0, 0);
        *dxC = m(1, 0);
    }
    void CORE::set_w(Matrix<double, 3, 1> & m) {
        *wD_R = m(0, 0);
        *wD_gmin = m(1, 0);
        *wD = m(2, 0);
    }
    void CORE::set_wl(Matrix<double, 2, 1> & m) {
        *wD_R = m(0, 0);
        *wD_gmin = m(1, 0);
    }
    void CORE::set_wnl(Matrix<double, 1, 1> & m) {
        *wD = m(0, 0);
    }
    void CORE::set_u(Matrix<double, 1, 1> & m) {
        *uIN = m(0, 0);
    }
    void CORE::set_p(Matrix<double, 0, 1> & m) {
    }
    void CORE::set_v(Matrix<double, 5, 1> & m) {
        *dxL = m(0, 0);
        *dxC = m(1, 0);
        *wD_R = m(2, 0);
        *wD_gmin = m(3, 0);
        *wD = m(4, 0);
    }
    void CORE::set_vl(Matrix<double, 2, 1> & m) {
        *wD_R = m(0, 0);
        *wD_gmin = m(1, 0);
    }
    void CORE::set_vnl(Matrix<double, 3, 1> & m) {
        *dxL = m(0, 0);
        *dxC = m(1, 0);
        *wD = m(2, 0);
    }
    
    // Functions Results Accessors
    
    Matrix<double, 3, 1> CORE::Mvnly() const {
        return _Mvnly;
    }
    Matrix<double, 2, 3> CORE::jacGlnl() const {
        return _jacGlnl;
    }
    Matrix<double, 3, 1> CORE::fnl() const {
        return _fnl;
    }
    Matrix<double, 2, 3> CORE::jacFlnl() const {
        return _jacFlnl;
    }
    Matrix<double, 5, 1> CORE::Mvy() const {
        return _Mvy;
    }
    Matrix<double, 3, 3> CORE::Mvnlvnl() const {
        return _Mvnlvnl;
    }
    Matrix<double, 2, 1> CORE::Mvly() const {
        return _Mvly;
    }
    Matrix<double, 2, 2> CORE::jacFll() const {
        return _jacFll;
    }
    Matrix<double, 5, 5> CORE::Mvv() const {
        return _Mvv;
    }
    Matrix<double, 2, 3> CORE::Mvlvnl() const {
        return _Mvlvnl;
    }
    Matrix<double, 2, 2> CORE::Mvlvl() const {
        return _Mvlvl;
    }
    Matrix<double, 3, 2> CORE::jacGnll() const {
        return _jacGnll;
    }
    Matrix<double, 2, 1> CORE::dxH() const {
        return _dxH;
    }
    Matrix<double, 2, 2> CORE::jacGll() const {
        return _jacGll;
    }
    Matrix<double, 2, 1> CORE::Fl() const {
        return _Fl;
    }
    Matrix<double, 3, 2> CORE::Mvnlvl() const {
        return _Mvnlvl;
    }
    Matrix<double, 5, 1> CORE::G() const {
        return _G;
    }
    Matrix<double, 5, 1> CORE::F() const {
        return _F;
    }
    double CORE::H() const {
        return _H;
    }
    Matrix<double, 3, 3> CORE::jacGnlnl() const {
        return _jacGnlnl;
    }
    Matrix<double, 3, 2> CORE::jacFnll() const {
        return _jacFnll;
    }
    Matrix<double, 0, 0> CORE::Q() const {
        return _Q;
    }
    Matrix<double, 3, 1> CORE::Fnl() const {
        return _Fnl;
    }
    Matrix<double, 2, 1> CORE::fl() const {
        return _fl;
    }
    Matrix<double, 3, 1> CORE::Gnl() const {
        return _Gnl;
    }
    Matrix<double, 2, 2> CORE::Zl() const {
        return _Zl;
    }
    Matrix<double, 3, 1> CORE::z() const {
        return _z;
    }
    Matrix<double, 0, 0> CORE::g() const {
        return _g;
    }
    Matrix<double, 5, 1> CORE::f() const {
        return _f;
    }
    Matrix<double, 5, 5> CORE::jacF() const {
        return _jacF;
    }
    Matrix<double, 2, 1> CORE::Gl() const {
        return _Gl;
    }
    Matrix<double, 3, 3> CORE::jacFnlnl() const {
        return _jacFnlnl;
    }
    Matrix<double, 1, 1> CORE::y() const {
        return _y;
    }
    double CORE::fs() const {
        return _fs;
    }
    
    // Functions Results Accessors
    
    vector<double> CORE::fnl_vector() const {    
        vector<double> v = vector<double>(3);    
        v[0] = _fnl(0, 0);    
        v[1] = _fnl(1, 0);    
        v[2] = _fnl(2, 0);    
        return v;
    }
    vector<double> CORE::dxH_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = _dxH(0, 0);    
        v[1] = _dxH(1, 0);    
        return v;
    }
    vector<double> CORE::Fl_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = _Fl(0, 0);    
        v[1] = _Fl(1, 0);    
        return v;
    }
    vector<double> CORE::G_vector() const {    
        vector<double> v = vector<double>(5);    
        v[0] = _G(0, 0);    
        v[1] = _G(1, 0);    
        v[2] = _G(2, 0);    
        v[3] = _G(3, 0);    
        v[4] = _G(4, 0);    
        return v;
    }
    vector<double> CORE::F_vector() const {    
        vector<double> v = vector<double>(5);    
        v[0] = _F(0, 0);    
        v[1] = _F(1, 0);    
        v[2] = _F(2, 0);    
        v[3] = _F(3, 0);    
        v[4] = _F(4, 0);    
        return v;
    }
    vector<double> CORE::Q_vector() const {    
        vector<double> v = vector<double>(0);    
        return v;
    }
    vector<double> CORE::Fnl_vector() const {    
        vector<double> v = vector<double>(3);    
        v[0] = _Fnl(0, 0);    
        v[1] = _Fnl(1, 0);    
        v[2] = _Fnl(2, 0);    
        return v;
    }
    vector<double> CORE::fl_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = _fl(0, 0);    
        v[1] = _fl(1, 0);    
        return v;
    }
    vector<double> CORE::Gnl_vector() const {    
        vector<double> v = vector<double>(3);    
        v[0] = _Gnl(0, 0);    
        v[1] = _Gnl(1, 0);    
        v[2] = _Gnl(2, 0);    
        return v;
    }
    vector<double> CORE::z_vector() const {    
        vector<double> v = vector<double>(3);    
        v[0] = _z(0, 0);    
        v[1] = _z(1, 0);    
        v[2] = _z(2, 0);    
        return v;
    }
    vector<double> CORE::g_vector() const {    
        vector<double> v = vector<double>(0);    
        return v;
    }
    vector<double> CORE::f_vector() const {    
        vector<double> v = vector<double>(5);    
        v[0] = _f(0, 0);    
        v[1] = _f(1, 0);    
        v[2] = _f(2, 0);    
        v[3] = _f(3, 0);    
        v[4] = _f(4, 0);    
        return v;
    }
    vector<double> CORE::Gl_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = _Gl(0, 0);    
        v[1] = _Gl(1, 0);    
        return v;
    }
    vector<double> CORE::y_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = _y(0, 0);    
        return v;
    }
    
    // Oprations Results Accessors
    
    Matrix<double, 2, 1> CORE::ud_x() const {
        return _ud_x;
    }
    Matrix<double, 2, 2> CORE::ijacFll() const {
        return _ijacFll;
    }
    Matrix<double, 2, 1> CORE::ud_vl() const {
        return _ud_vl;
    }
    Matrix<double, 3, 1> CORE::save_Fnl() const {
        return _save_Fnl;
    }
    Matrix<double, 3, 1> CORE::ud_Fnl() const {
        return _ud_Fnl;
    }
    Matrix<double, 3, 3> CORE::jacFnl() const {
        return _jacFnl;
    }
    Matrix<double, 3, 3> CORE::ijacFnl() const {
        return _ijacFnl;
    }
    double CORE::res_Fnl() const {
        return _res_Fnl;
    }
    double CORE::step_Fnl() const {
        return _step_Fnl;
    }
    Matrix<double, 3, 1> CORE::ud_vnl() const {
        return _ud_vnl;
    }
    
    // Oprations Results Accessors
    
    vector<double> CORE::ud_x_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = _ud_x(0, 0);    
        v[1] = _ud_x(1, 0);    
        return v;
    }
    vector<double> CORE::ud_vl_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = _ud_vl(0, 0);    
        v[1] = _ud_vl(1, 0);    
        return v;
    }
    vector<double> CORE::save_Fnl_vector() const {    
        vector<double> v = vector<double>(3);    
        v[0] = _save_Fnl(0, 0);    
        v[1] = _save_Fnl(1, 0);    
        v[2] = _save_Fnl(2, 0);    
        return v;
    }
    vector<double> CORE::ud_Fnl_vector() const {    
        vector<double> v = vector<double>(3);    
        v[0] = _ud_Fnl(0, 0);    
        v[1] = _ud_Fnl(1, 0);    
        v[2] = _ud_Fnl(2, 0);    
        return v;
    }
    vector<double> CORE::ud_vnl_vector() const {    
        vector<double> v = vector<double>(3);    
        v[0] = _ud_vnl(0, 0);    
        v[1] = _ud_vnl(1, 0);    
        v[2] = _ud_vnl(2, 0);    
        return v;
    }
    
    // Default Constructor
    
    CORE::CORE(){
        init();
    };
    
    // Constructor with vector state initalization
    
    CORE::CORE(vector<double> & x0){
    
        if (x().size() == x0.size()) {
            set_x(x0);
        }
        else {
            cerr << "Size of x0 does not match size of x" << endl;
            exit(1);
        }
        init();
    };
    
    // Constructor with matrix state initalization
    
    CORE::CORE(Matrix<double, 2, 1> & x0){
    set_x(x0);
        init();
    };
    
    // Default Destructor
    
    CORE::~CORE(){
    };


// PRIVATE    
    
    // Functions Results Updates
    
    void CORE::Mvnly_update(){
    };
    void CORE::jacGlnl_update(){
    _jacGlnl(0, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       -0.5/(*Lsymbol)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       0
    )
    : (
       -0.5/(*Lsymbol)
    )));
    _jacGlnl(1, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       -0.5/(*Lsymbol)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       0
    )
    : (
       -0.5/(*Lsymbol)
    )));
    _jacGlnl(1, 2) = 1.0*(*mu)*(*v0)/((*Is) + (*wD));
    };
    void CORE::fnl_update(){
    _fnl(0, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       5.0*(*dxL) + 10.0*(*xL)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       10.0*(*xL)
    )
    : (
       5.0*(*dxL) + 10.0*(*xL)
    )));
    _fnl(1, 0) = (((*dxC) < -2.22044604925031e-16) ? (
       1973943.9399921*(*dxC) + 3947887.87998421*(*xC)
    )
    : (((*dxC) < 2.22044604925031e-16) ? (
       3947887.87998421*(*xC)
    )
    : (
       1973943.9399921*(*dxC) + 3947887.87998421*(*xC)
    )));
    _fnl(2, 0) = 0.0442*log(500000000.0*(*wD) + 1.0);
    };
    void CORE::jacFlnl_update(){
    _jacFlnl(0, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       -0.5/(*Lsymbol)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       0
    )
    : (
       -0.5/(*Lsymbol)
    )));
    _jacFlnl(1, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       -0.5/(*Lsymbol)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       0
    )
    : (
       -0.5/(*Lsymbol)
    )));
    _jacFlnl(1, 2) = 1.0*(*mu)*(*v0)/((*Is) + (*wD));
    };
    void CORE::Mvy_update(){
    };
    void CORE::Mvnlvnl_update(){
    };
    void CORE::Mvly_update(){
    };
    void CORE::jacFll_update(){
    };
    void CORE::Mvv_update(){
    };
    void CORE::Mvlvnl_update(){
    };
    void CORE::Mvlvl_update(){
    };
    void CORE::jacGnll_update(){
    };
    void CORE::dxH_update(){
    _dxH(0, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       5.0*(*dxL) + 10.0*(*xL)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       10.0*(*xL)
    )
    : (
       5.0*(*dxL) + 10.0*(*xL)
    )));
    _dxH(1, 0) = (((*dxC) < -2.22044604925031e-16) ? (
       1973943.9399921*(*dxC) + 3947887.87998421*(*xC)
    )
    : (((*dxC) < 2.22044604925031e-16) ? (
       3947887.87998421*(*xC)
    )
    : (
       1973943.9399921*(*dxC) + 3947887.87998421*(*xC)
    )));
    };
    void CORE::jacGll_update(){
    };
    void CORE::Fl_update(){
    _Fl(0, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       -5.0*(*dxL) + (*wD_R) - 10.0*(*xL)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       (*wD_R) - 10.0*(*xL)
    )
    : (
       -5.0*(*dxL) + (*wD_R) - 10.0*(*xL)
    )));
    _Fl(1, 0) = (*wD_gmin) - 1.0*(((*dxL) < -2.22044604925031e-16) ? (
       5.0*(*dxL) + 10.0*(*xL)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       10.0*(*xL)
    )
    : (
       5.0*(*dxL) + 10.0*(*xL)
    ))) + 0.0442*log(500000000.0*(*wD) + 1.0);
    };
    void CORE::Mvnlvl_update(){
    };
    void CORE::G_update(){
    _G(0, 0) = (((*dxC) < -2.22044604925031e-16) ? (
       1973943.9399921*(*dxC) + 48000.0*(*dxL) + 1.0*(*uIN) + 3947887.87998421*(*xC)
    )
    : (((*dxC) < 2.22044604925031e-16) ? (
       48000.0*(*dxL) + 1.0*(*uIN) + 3947887.87998421*(*xC)
    )
    : (
       1973943.9399921*(*dxC) + 48000.0*(*dxL) + 1.0*(*uIN) + 3947887.87998421*(*xC)
    )));
    _G(1, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       48000.0*(*dxC) - 5.0*(*dxL) - 10.0*(*xL)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       48000.0*(*dxC) - 10.0*(*xL)
    )
    : (
       48000.0*(*dxC) - 5.0*(*dxL) - 10.0*(*xL)
    )));
    _G(2, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       -5.0*(*dxL) - 10.0*(*xL)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       -10.0*(*xL)
    )
    : (
       -5.0*(*dxL) - 10.0*(*xL)
    )));
    _G(3, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       -5.0*(*dxL) - 10.0*(*xL) + 0.0442*log(500000000.0*(*wD) + 1.0)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       -10.0*(*xL) + 0.0442*log(500000000.0*(*wD) + 1.0)
    )
    : (
       -5.0*(*dxL) - 10.0*(*xL) + 0.0442*log(500000000.0*(*wD) + 1.0)
    )));
    _G(4, 0) = (*wD);
    };
    void CORE::F_update(){
    _F(0, 0) = 48000.0*(*dxL) + 1.0*(*uIN) + 0.5*(*wD_R) + 1000000000000.0*(*wD_gmin) + 1.0*(((*dxC) < -2.22044604925031e-16) ? (
       1973943.9399921*(*dxC) + 3947887.87998421*(*xC)
    )
    : (((*dxC) < 2.22044604925031e-16) ? (
       3947887.87998421*(*xC)
    )
    : (
       1973943.9399921*(*dxC) + 3947887.87998421*(*xC)
    )));
    _F(1, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       48000.0*(*dxC) - 5.0*(*dxL) - 10.0*(*xL)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       48000.0*(*dxC) - 10.0*(*xL)
    )
    : (
       48000.0*(*dxC) - 5.0*(*dxL) - 10.0*(*xL)
    )));
    _F(2, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       -5.0*(*dxL) + (*wD_R) - 10.0*(*xL)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       (*wD_R) - 10.0*(*xL)
    )
    : (
       -5.0*(*dxL) + (*wD_R) - 10.0*(*xL)
    )));
    _F(3, 0) = (*wD_gmin) - 1.0*(((*dxL) < -2.22044604925031e-16) ? (
       5.0*(*dxL) + 10.0*(*xL)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       10.0*(*xL)
    )
    : (
       5.0*(*dxL) + 10.0*(*xL)
    ))) + 0.0442*log(500000000.0*(*wD) + 1.0);
    _F(4, 0) = (*wD) - 1000000000000.0*(*wD_gmin);
    };
    void CORE::H_update(){
    _H = 0.5*pow((*xL), 2)/(*Lsymbol) + 0.5*pow((*xC), 2)/(*Csymbol);
    };
    void CORE::jacGnlnl_update(){
    _jacGnlnl(1, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       -0.5/(*Lsymbol)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       0
    )
    : (
       -0.5/(*Lsymbol)
    )));
    _jacGnlnl(0, 1) = (((*dxC) < -2.22044604925031e-16) ? (
       0.5/(*Csymbol)
    )
    : (((*dxC) < 2.22044604925031e-16) ? (
       0
    )
    : (
       0.5/(*Csymbol)
    )));
    };
    void CORE::jacFnll_update(){
    };
    void CORE::Q_update(){
    };
    void CORE::Fnl_update(){
    _Fnl(0, 0) = 48000.0*(*dxL) + 1.0*(*uIN) + 0.5*(*wD_R) + 1000000000000.0*(*wD_gmin) + 1.0*(((*dxC) < -2.22044604925031e-16) ? (
       1973943.9399921*(*dxC) + 3947887.87998421*(*xC)
    )
    : (((*dxC) < 2.22044604925031e-16) ? (
       3947887.87998421*(*xC)
    )
    : (
       1973943.9399921*(*dxC) + 3947887.87998421*(*xC)
    )));
    _Fnl(1, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       48000.0*(*dxC) - 5.0*(*dxL) - 10.0*(*xL)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       48000.0*(*dxC) - 10.0*(*xL)
    )
    : (
       48000.0*(*dxC) - 5.0*(*dxL) - 10.0*(*xL)
    )));
    _Fnl(2, 0) = (*wD) - 1000000000000.0*(*wD_gmin);
    };
    void CORE::fl_update(){
    _fl(0, 0) = 0.5*(*wD_R);
    _fl(1, 0) = 1000000000000.0*(*wD_gmin);
    };
    void CORE::Gnl_update(){
    _Gnl(0, 0) = (((*dxC) < -2.22044604925031e-16) ? (
       1973943.9399921*(*dxC) + 48000.0*(*dxL) + 1.0*(*uIN) + 3947887.87998421*(*xC)
    )
    : (((*dxC) < 2.22044604925031e-16) ? (
       48000.0*(*dxL) + 1.0*(*uIN) + 3947887.87998421*(*xC)
    )
    : (
       1973943.9399921*(*dxC) + 48000.0*(*dxL) + 1.0*(*uIN) + 3947887.87998421*(*xC)
    )));
    _Gnl(1, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       48000.0*(*dxC) - 5.0*(*dxL) - 10.0*(*xL)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       48000.0*(*dxC) - 10.0*(*xL)
    )
    : (
       48000.0*(*dxC) - 5.0*(*dxL) - 10.0*(*xL)
    )));
    _Gnl(2, 0) = (*wD);
    };
    void CORE::Zl_update(){
    };
    void CORE::z_update(){
    _z(0, 0) = 0.5*(*wD_R);
    _z(1, 0) = 1000000000000.0*(*wD_gmin);
    _z(2, 0) = 0.0442*log(500000000.0*(*wD) + 1.0);
    };
    void CORE::g_update(){
    };
    void CORE::f_update(){
    _f(0, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       5.0*(*dxL) + 10.0*(*xL)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       10.0*(*xL)
    )
    : (
       5.0*(*dxL) + 10.0*(*xL)
    )));
    _f(1, 0) = (((*dxC) < -2.22044604925031e-16) ? (
       1973943.9399921*(*dxC) + 3947887.87998421*(*xC)
    )
    : (((*dxC) < 2.22044604925031e-16) ? (
       3947887.87998421*(*xC)
    )
    : (
       1973943.9399921*(*dxC) + 3947887.87998421*(*xC)
    )));
    _f(2, 0) = 0.5*(*wD_R);
    _f(3, 0) = 1000000000000.0*(*wD_gmin);
    _f(4, 0) = 0.0442*log(500000000.0*(*wD) + 1.0);
    };
    void CORE::jacF_update(){
    _jacF(1, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       -0.5/(*Lsymbol)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       0
    )
    : (
       -0.5/(*Lsymbol)
    )));
    _jacF(2, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       -0.5/(*Lsymbol)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       0
    )
    : (
       -0.5/(*Lsymbol)
    )));
    _jacF(3, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       -0.5/(*Lsymbol)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       0
    )
    : (
       -0.5/(*Lsymbol)
    )));
    _jacF(0, 1) = (((*dxC) < -2.22044604925031e-16) ? (
       0.5/(*Csymbol)
    )
    : (((*dxC) < 2.22044604925031e-16) ? (
       0
    )
    : (
       0.5/(*Csymbol)
    )));
    _jacF(3, 4) = 1.0*(*mu)*(*v0)/((*Is) + (*wD));
    };
    void CORE::Gl_update(){
    _Gl(0, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       -5.0*(*dxL) - 10.0*(*xL)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       -10.0*(*xL)
    )
    : (
       -5.0*(*dxL) - 10.0*(*xL)
    )));
    _Gl(1, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       -5.0*(*dxL) - 10.0*(*xL) + 0.0442*log(500000000.0*(*wD) + 1.0)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       -10.0*(*xL) + 0.0442*log(500000000.0*(*wD) + 1.0)
    )
    : (
       -5.0*(*dxL) - 10.0*(*xL) + 0.0442*log(500000000.0*(*wD) + 1.0)
    )));
    };
    void CORE::jacFnlnl_update(){
    _jacFnlnl(1, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       -0.5/(*Lsymbol)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       0
    )
    : (
       -0.5/(*Lsymbol)
    )));
    _jacFnlnl(0, 1) = (((*dxC) < -2.22044604925031e-16) ? (
       0.5/(*Csymbol)
    )
    : (((*dxC) < 2.22044604925031e-16) ? (
       0
    )
    : (
       0.5/(*Csymbol)
    )));
    };
    void CORE::y_update(){
    _y(0, 0) = (((*dxL) < -2.22044604925031e-16) ? (
       5.0*(*dxL) + 10.0*(*xL)
    )
    : (((*dxL) < 2.22044604925031e-16) ? (
       10.0*(*xL)
    )
    : (
       5.0*(*dxL) + 10.0*(*xL)
    )));
    };
    void CORE::fs_update(){
    };
    
    // Oprations Results Updates
    
    void CORE::ud_x_update(){
        _ud_x = (x()) + (dx());
    };
    void CORE::ijacFll_update(){
        _ijacFll = (jacFll()).inverse();
    };
    void CORE::ud_vl_update(){
        _ud_vl = (ijacFll())*((-1.0)*(Gl()));
    };
    void CORE::save_Fnl_update(){
        _save_Fnl = Fnl();
    };
    void CORE::ud_Fnl_update(){
        _ud_Fnl = (Gnl()) + ((jacFnll())*((ijacFll())*((-1)*(Gl()))));
    };
    void CORE::jacFnl_update(){
        _jacFnl = (jacGnlnl()) + ((jacFnll())*((ijacFll())*((-1)*(jacGlnl()))));
    };
    void CORE::ijacFnl_update(){
        _ijacFnl = (jacFnl()).inverse();
    };
    void CORE::res_Fnl_update(){
        _res_Fnl = sqrt((Fnl()).dot(Fnl()));
    };
    void CORE::step_Fnl_update(){
        _step_Fnl = sqrt(((Fnl()) + ((-1.0)*(save_Fnl()))).dot((Fnl()) + ((-1.0)*(save_Fnl()))));
    };
    void CORE::ud_vnl_update(){
        _ud_vnl = (vnl()) + ((-1.0)*((ijacFnl())*(Fnl())));
    };
    
    // Initialization
    
    void CORE::init(){
        
        
        // Functions Results Initialisation Data
        double Mvnly_data[] = {-1.00000000000000, 0, 0};
        double jacGlnl_data[] = {0, 0, 0, 0, 0, 0};
        double fnl_data[] = {0, 0, 0};
        double jacFlnl_data[] = {0, 0, 0, 0, 0, 0};
        double Mvy_data[] = {-1.00000000000000, 0, 0, 0, 0};
        double Mvnlvnl_data[] = {0, 1.00000000000000, 0, -1.00000000000000, 0, 0, 0, 0, 0};
        double Mvly_data[] = {0, 0};
        double jacFll_data[] = {1, 0, 0, 1};
        double Mvv_data[] = {0, 1.00000000000000, 1.00000000000000, 1.00000000000000, 0, -1.00000000000000, 0, 0, 0, 0, -1.00000000000000, 0, 0, 0, 0, -1.00000000000000, 0, 0, 0, 1.00000000000000, 0, 0, 0, -1.00000000000000, 0};
        double Mvlvnl_data[] = {1.00000000000000, 1.00000000000000, 0, 0, 0, -1.00000000000000};
        double Mvlvl_data[] = {0, 0, 0, 0};
        double jacGnll_data[] = {0, 0, 0, 0, 0, 0};
        double dxH_data[] = {0, 0};
        double jacGll_data[] = {0, 0, 0, 0};
        double Fl_data[] = {0, 0};
        double Mvnlvl_data[] = {-1.00000000000000, 0, 0, -1.00000000000000, 0, 1.00000000000000};
        double G_data[] = {0, 0, 0, 0, 0};
        double F_data[] = {0, 0, 0, 0, 0};
        double H_data = 0.;
        double jacGnlnl_data[] = {48000.0000000000, 0, 0, 0, 48000.0000000000, 0, 0, 0, 1};
        double jacFnll_data[] = {1.0*(*Rd), 0, 0, 1.0/(*gmin), 0, -1.0/(*gmin)};
        double Q_data[] = {};
        double Fnl_data[] = {0, 0, 0};
        double fl_data[] = {0, 0};
        double Gnl_data[] = {0, 0, 0};
        double Zl_data[] = {(*Rd), 0, 0, 1.0/(*gmin)};
        double z_data[] = {0, 0, 0};
        double g_data[] = {};
        double f_data[] = {0, 0, 0, 0, 0};
        double jacF_data[] = {48000.0000000000, 0, 0, 0, 0, 0, 48000.0000000000, 0, 0, 0, 1.0*(*Rd), 0, 1, 0, 0, 1.0/(*gmin), 0, 0, 1, -1.0/(*gmin), 0, 0, 0, 0, 1};
        double Gl_data[] = {0, 0};
        double jacFnlnl_data[] = {48000.0000000000, 0, 0, 0, 48000.0000000000, 0, 0, 0, 1};
        double y_data[] = {0};
        double fs_data = (*f_s);
        
        // Oprations Results Initialisation Data
        double ud_x_data[] = {0.0, 0.0};
        double ijacFll_data[] = {1.0, 0.0, 0.0, 1.0};
        double ud_vl_data[] = {0.0, 0.0};
        double save_Fnl_data[] = {0.0, 0.0, 0.0};
        double ud_Fnl_data[] = {0.0, 0.0, 0.0};
        double jacFnl_data[] = {48000.0, 0.0, 0.0, 0.0, 48000.0, 0.0, -2.21e+19, 0.0, 2.21e+19};
        double ijacFnl_data[] = {2.08333333333e-05, 0.0, 0.0, 0.0, 2.08333333333e-05, 0.0, 2.08333333333e-05, 0.0, 4.52488687783e-20};
        double res_Fnl_data = 0.;
        double step_Fnl_data = 0.;
        double ud_vnl_data[] = {0.0, 0.0, 0.0};    
        
        // Functions Results Initialisation
        
        _Mvnly = Map<Matrix<double, 3, 1>> (Mvnly_data);
        _jacGlnl = Map<Matrix<double, 2, 3>> (jacGlnl_data);
        _fnl = Map<Matrix<double, 3, 1>> (fnl_data);
        _jacFlnl = Map<Matrix<double, 2, 3>> (jacFlnl_data);
        _Mvy = Map<Matrix<double, 5, 1>> (Mvy_data);
        _Mvnlvnl = Map<Matrix<double, 3, 3>> (Mvnlvnl_data);
        _Mvly = Map<Matrix<double, 2, 1>> (Mvly_data);
        _jacFll = Map<Matrix<double, 2, 2>> (jacFll_data);
        _Mvv = Map<Matrix<double, 5, 5>> (Mvv_data);
        _Mvlvnl = Map<Matrix<double, 2, 3>> (Mvlvnl_data);
        _Mvlvl = Map<Matrix<double, 2, 2>> (Mvlvl_data);
        _jacGnll = Map<Matrix<double, 3, 2>> (jacGnll_data);
        _dxH = Map<Matrix<double, 2, 1>> (dxH_data);
        _jacGll = Map<Matrix<double, 2, 2>> (jacGll_data);
        _Fl = Map<Matrix<double, 2, 1>> (Fl_data);
        _Mvnlvl = Map<Matrix<double, 3, 2>> (Mvnlvl_data);
        _G = Map<Matrix<double, 5, 1>> (G_data);
        _F = Map<Matrix<double, 5, 1>> (F_data);
        _H = H_data;
        _jacGnlnl = Map<Matrix<double, 3, 3>> (jacGnlnl_data);
        _jacFnll = Map<Matrix<double, 3, 2>> (jacFnll_data);
        _Q = Map<Matrix<double, 0, 0>> (Q_data);
        _Fnl = Map<Matrix<double, 3, 1>> (Fnl_data);
        _fl = Map<Matrix<double, 2, 1>> (fl_data);
        _Gnl = Map<Matrix<double, 3, 1>> (Gnl_data);
        _Zl = Map<Matrix<double, 2, 2>> (Zl_data);
        _z = Map<Matrix<double, 3, 1>> (z_data);
        _g = Map<Matrix<double, 0, 0>> (g_data);
        _f = Map<Matrix<double, 5, 1>> (f_data);
        _jacF = Map<Matrix<double, 5, 5>> (jacF_data);
        _Gl = Map<Matrix<double, 2, 1>> (Gl_data);
        _jacFnlnl = Map<Matrix<double, 3, 3>> (jacFnlnl_data);
        _y = Map<Matrix<double, 1, 1>> (y_data);
        _fs = fs_data;
        
        // Operations Results Initialisation
        
        _ud_x = Map<Matrix<double, 2, 1>> (ud_x_data);
        _ijacFll = Map<Matrix<double, 2, 2>> (ijacFll_data);
        _ud_vl = Map<Matrix<double, 2, 1>> (ud_vl_data);
        _save_Fnl = Map<Matrix<double, 3, 1>> (save_Fnl_data);
        _ud_Fnl = Map<Matrix<double, 3, 1>> (ud_Fnl_data);
        _jacFnl = Map<Matrix<double, 3, 3>> (jacFnl_data);
        _ijacFnl = Map<Matrix<double, 3, 3>> (ijacFnl_data);
        _res_Fnl = res_Fnl_data;
        _step_Fnl = step_Fnl_data;
        _ud_vnl = Map<Matrix<double, 3, 1>> (ud_vnl_data);
    };