/*
    Copyright or (c) or Copr. Project-Team S3 (Sound Signals and Systems) and
    Analysis/Synthesis team, Laboratory of Sciences and Technologies of Music and
    Sound (UMR 9912), IRCAM-CNRS-UPMC, 1 place Igor Stravinsky, F-75004 Paris
    * contributors : Antoine Falaize, Thomas Helie,
    * corresponding contributor: antoine.falaize@ircam.fr
    * date: 2016/12/31 12:47:34

    This has been geerated by PyPHS which purpose is to generate C++
    code for the simulation of multiphysics system described by graph structures.

    This software is governed by the CeCILL-B license under French law and
    abiding by the rules of distribution of free software.  You can  use,
    modify and/ or redistribute the software under the terms of the CeCILL-B
    license as circulated by CEA, CNRS and INRIA at the following URL
    "http://www.cecill.info".

    As a counterpart to the access to the source code and  rights to copy,
    modify and redistribute granted by the license, users are provided only
    with a limited warranty  and the software's author,  the holder of the
    economic rights, and the successive licensors  have only  limited liability.

    In this respect, the user's attention is drawn to the risks associated
    with loading,  using,  modifying and/or developing or reproducing the
    software by the user in light of its specific status of free software,
    that may mean  that it is complicated to manipulate,  and  that  also
    therefore means  that it is reserved for developers  and  experienced
    professionals having in-depth computer knowledge. Users are therefore
    encouraged to load and test the software's suitability as regards their
    requirements in conditions enabling the security of their systems and/or
    data to be ensured and,  more generally, to use and operate it in the
    same conditions as regards security.

    The fact that you are presently reading this means that you have had
    knowledge of the CeCILL-B license and that you accept its terms.

    Created on 2016/12/31 12:47:34

    author: Antoine Falaize


===========================================================================

    This file was automatically generated by PyPHS, date 2017/05/23 23:41:51.

    It contains the code for the simulation of system 'CORE'.

===========================================================================
*/

#include "core.h"

// PUBLIC    
    
    void CORE::update(vector<double> & u_vec, vector<double> & p_vec){
    
        set_u(u_vec);
        set_p(p_vec);
        
        ud_x_update();
        set_x(_ud_x);
        jactempFll_update();
        ijactempFll_update();
        Gl_update();
        jactempFnll_update();
        Gnl_update();
        Fnl_update();
        res_Fnl_update();
        
        unsigned int iter_res_Fnl = 0;
        _step_Fnl = 1;
        while ((iter_res_Fnl<10) & (res_Fnl()>1e-16) & (step_Fnl()>1e-16)){    
            save_Fnl_update();
            jacGlnl_update();
            jacGnlnl_update();
            jacFnl_update();
            ijacFnl_update();
            ud_vnl_update();
            set_vnl(_ud_vnl);
            Gl_update();
            Gnl_update();
            Fnl_update();
            res_Fnl_update();
            step_Fnl_update();iter_res_Fnl += 1;
        }
        
        ud_vl_update();
        set_vl(_ud_vl);
        dxH_update();
        z_update();
        y_update();
    }
    
    // Acessors to Arguments, return vector<double>
    
    
    vector<double> CORE::x_vector() const {    
        vector<double> v = vector<double>(14);    
        v[0] = *xpickupobs;    
        v[1] = *xbeamK4;    
        v[2] = *xbeamK3;    
        v[3] = *xbeamK2;    
        v[4] = *xbeamK1;    
        v[5] = *xbeamK0;    
        v[6] = *xbeamM0;    
        v[7] = *xbeamM1;    
        v[8] = *xbeamM2;    
        v[9] = *xbeamM3;    
        v[10] = *xbeamM4;    
        v[11] = *xpickupCcoil;    
        v[12] = *xmass;    
        v[13] = *qfelt;    
        return v;
    }
    
    vector<double> CORE::dx_vector() const {    
        vector<double> v = vector<double>(14);    
        v[0] = *dxpickupobs;    
        v[1] = *dxbeamK4;    
        v[2] = *dxbeamK3;    
        v[3] = *dxbeamK2;    
        v[4] = *dxbeamK1;    
        v[5] = *dxbeamK0;    
        v[6] = *dxbeamM0;    
        v[7] = *dxbeamM1;    
        v[8] = *dxbeamM2;    
        v[9] = *dxbeamM3;    
        v[10] = *dxbeamM4;    
        v[11] = *dxpickupCcoil;    
        v[12] = *dxmass;    
        v[13] = *dqfelt;    
        return v;
    }
    
    vector<double> CORE::w_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = *wpickupobs;    
        return v;
    }
    
    vector<double> CORE::u_vector() const {    
        vector<double> v = vector<double>(3);    
        v[0] = *uinput;    
        v[1] = *uout;    
        v[2] = *upickupMagnet;    
        return v;
    }
    
    vector<double> CORE::p_vector() const {    
        vector<double> v = vector<double>(0);    
        return v;
    }
    
    vector<double> CORE::vl_vector() const {    
        vector<double> v = vector<double>(13);    
        v[0] = *dxpickupobs;    
        v[1] = *dxbeamK4;    
        v[2] = *dxbeamK3;    
        v[3] = *dxbeamK2;    
        v[4] = *dxbeamK1;    
        v[5] = *dxbeamK0;    
        v[6] = *dxbeamM0;    
        v[7] = *dxbeamM1;    
        v[8] = *dxbeamM2;    
        v[9] = *dxbeamM3;    
        v[10] = *dxbeamM4;    
        v[11] = *dxpickupCcoil;    
        v[12] = *dxmass;    
        return v;
    }
    
    vector<double> CORE::vnl_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = *dqfelt;    
        v[1] = *wpickupobs;    
        return v;
    }
    
    // Acessors to Arguments, return Matrix<double, n, m>
    
    Matrix<double, 14, 1> CORE::x() const {    
        Matrix<double, 14, 1> m;    
        m(0, 0) = *xpickupobs;    
        m(1, 0) = *xbeamK4;    
        m(2, 0) = *xbeamK3;    
        m(3, 0) = *xbeamK2;    
        m(4, 0) = *xbeamK1;    
        m(5, 0) = *xbeamK0;    
        m(6, 0) = *xbeamM0;    
        m(7, 0) = *xbeamM1;    
        m(8, 0) = *xbeamM2;    
        m(9, 0) = *xbeamM3;    
        m(10, 0) = *xbeamM4;    
        m(11, 0) = *xpickupCcoil;    
        m(12, 0) = *xmass;    
        m(13, 0) = *qfelt;    
        return m;
    }
    Matrix<double, 14, 1> CORE::dx() const {    
        Matrix<double, 14, 1> m;    
        m(0, 0) = *dxpickupobs;    
        m(1, 0) = *dxbeamK4;    
        m(2, 0) = *dxbeamK3;    
        m(3, 0) = *dxbeamK2;    
        m(4, 0) = *dxbeamK1;    
        m(5, 0) = *dxbeamK0;    
        m(6, 0) = *dxbeamM0;    
        m(7, 0) = *dxbeamM1;    
        m(8, 0) = *dxbeamM2;    
        m(9, 0) = *dxbeamM3;    
        m(10, 0) = *dxbeamM4;    
        m(11, 0) = *dxpickupCcoil;    
        m(12, 0) = *dxmass;    
        m(13, 0) = *dqfelt;    
        return m;
    }
    Matrix<double, 1, 1> CORE::w() const {    
        Matrix<double, 1, 1> m;    
        m(0, 0) = *wpickupobs;    
        return m;
    }
    Matrix<double, 3, 1> CORE::u() const {    
        Matrix<double, 3, 1> m;    
        m(0, 0) = *uinput;    
        m(1, 0) = *uout;    
        m(2, 0) = *upickupMagnet;    
        return m;
    }
    Matrix<double, 0, 0> CORE::p() const {    
        Matrix<double, 0, 0> m;    
        return m;
    }
    Matrix<double, 13, 1> CORE::vl() const {    
        Matrix<double, 13, 1> m;    
        m(0, 0) = *dxpickupobs;    
        m(1, 0) = *dxbeamK4;    
        m(2, 0) = *dxbeamK3;    
        m(3, 0) = *dxbeamK2;    
        m(4, 0) = *dxbeamK1;    
        m(5, 0) = *dxbeamK0;    
        m(6, 0) = *dxbeamM0;    
        m(7, 0) = *dxbeamM1;    
        m(8, 0) = *dxbeamM2;    
        m(9, 0) = *dxbeamM3;    
        m(10, 0) = *dxbeamM4;    
        m(11, 0) = *dxpickupCcoil;    
        m(12, 0) = *dxmass;    
        return m;
    }
    Matrix<double, 2, 1> CORE::vnl() const {    
        Matrix<double, 2, 1> m;    
        m(0, 0) = *dqfelt;    
        m(1, 0) = *wpickupobs;    
        return m;
    }
    
    // Mutators for Arguments, type = vector<double>
    
    void CORE::set_x(vector<double> & v) {
        *xpickupobs = v[0];
        *xbeamK4 = v[1];
        *xbeamK3 = v[2];
        *xbeamK2 = v[3];
        *xbeamK1 = v[4];
        *xbeamK0 = v[5];
        *xbeamM0 = v[6];
        *xbeamM1 = v[7];
        *xbeamM2 = v[8];
        *xbeamM3 = v[9];
        *xbeamM4 = v[10];
        *xpickupCcoil = v[11];
        *xmass = v[12];
        *qfelt = v[13];
    }
    void CORE::set_dx(vector<double> & v) {
        *dxpickupobs = v[0];
        *dxbeamK4 = v[1];
        *dxbeamK3 = v[2];
        *dxbeamK2 = v[3];
        *dxbeamK1 = v[4];
        *dxbeamK0 = v[5];
        *dxbeamM0 = v[6];
        *dxbeamM1 = v[7];
        *dxbeamM2 = v[8];
        *dxbeamM3 = v[9];
        *dxbeamM4 = v[10];
        *dxpickupCcoil = v[11];
        *dxmass = v[12];
        *dqfelt = v[13];
    }
    void CORE::set_w(vector<double> & v) {
        *wpickupobs = v[0];
    }
    void CORE::set_u(vector<double> & v) {
        *uinput = v[0];
        *uout = v[1];
        *upickupMagnet = v[2];
    }
    void CORE::set_p(vector<double> & v) {
    }
    void CORE::set_vl(vector<double> & v) {
        *dxpickupobs = v[0];
        *dxbeamK4 = v[1];
        *dxbeamK3 = v[2];
        *dxbeamK2 = v[3];
        *dxbeamK1 = v[4];
        *dxbeamK0 = v[5];
        *dxbeamM0 = v[6];
        *dxbeamM1 = v[7];
        *dxbeamM2 = v[8];
        *dxbeamM3 = v[9];
        *dxbeamM4 = v[10];
        *dxpickupCcoil = v[11];
        *dxmass = v[12];
    }
    void CORE::set_vnl(vector<double> & v) {
        *dqfelt = v[0];
        *wpickupobs = v[1];
    }
    
    // Mutators for Arguments, type = Matrix<double, n, m>
    
    void CORE::set_x(Matrix<double, 14, 1> & m) {
        *xpickupobs = m(0, 0);
        *xbeamK4 = m(1, 0);
        *xbeamK3 = m(2, 0);
        *xbeamK2 = m(3, 0);
        *xbeamK1 = m(4, 0);
        *xbeamK0 = m(5, 0);
        *xbeamM0 = m(6, 0);
        *xbeamM1 = m(7, 0);
        *xbeamM2 = m(8, 0);
        *xbeamM3 = m(9, 0);
        *xbeamM4 = m(10, 0);
        *xpickupCcoil = m(11, 0);
        *xmass = m(12, 0);
        *qfelt = m(13, 0);
    }
    void CORE::set_dx(Matrix<double, 14, 1> & m) {
        *dxpickupobs = m(0, 0);
        *dxbeamK4 = m(1, 0);
        *dxbeamK3 = m(2, 0);
        *dxbeamK2 = m(3, 0);
        *dxbeamK1 = m(4, 0);
        *dxbeamK0 = m(5, 0);
        *dxbeamM0 = m(6, 0);
        *dxbeamM1 = m(7, 0);
        *dxbeamM2 = m(8, 0);
        *dxbeamM3 = m(9, 0);
        *dxbeamM4 = m(10, 0);
        *dxpickupCcoil = m(11, 0);
        *dxmass = m(12, 0);
        *dqfelt = m(13, 0);
    }
    void CORE::set_w(Matrix<double, 1, 1> & m) {
        *wpickupobs = m(0, 0);
    }
    void CORE::set_u(Matrix<double, 3, 1> & m) {
        *uinput = m(0, 0);
        *uout = m(1, 0);
        *upickupMagnet = m(2, 0);
    }
    void CORE::set_p(Matrix<double, 0, 0> & m) {
    }
    void CORE::set_vl(Matrix<double, 13, 1> & m) {
        *dxpickupobs = m(0, 0);
        *dxbeamK4 = m(1, 0);
        *dxbeamK3 = m(2, 0);
        *dxbeamK2 = m(3, 0);
        *dxbeamK1 = m(4, 0);
        *dxbeamK0 = m(5, 0);
        *dxbeamM0 = m(6, 0);
        *dxbeamM1 = m(7, 0);
        *dxbeamM2 = m(8, 0);
        *dxbeamM3 = m(9, 0);
        *dxbeamM4 = m(10, 0);
        *dxpickupCcoil = m(11, 0);
        *dxmass = m(12, 0);
    }
    void CORE::set_vnl(Matrix<double, 2, 1> & m) {
        *dqfelt = m(0, 0);
        *wpickupobs = m(1, 0);
    }
    
    // Functions Results Accessors
    
    Matrix<double, 13, 13> CORE::jactempFll() const {
        return _jactempFll;
    }
    Matrix<double, 13, 1> CORE::Gl() const {
        return _Gl;
    }
    Matrix<double, 2, 13> CORE::jactempFnll() const {
        return _jactempFnll;
    }
    Matrix<double, 2, 1> CORE::Gnl() const {
        return _Gnl;
    }
    Matrix<double, 13, 2> CORE::jacGlnl() const {
        return _jacGlnl;
    }
    Matrix<double, 2, 2> CORE::jacGnlnl() const {
        return _jacGnlnl;
    }
    Matrix<double, 14, 1> CORE::dxH() const {
        return _dxH;
    }
    Matrix<double, 1, 1> CORE::z() const {
        return _z;
    }
    Matrix<double, 3, 1> CORE::y() const {
        return _y;
    }
    
    // Functions Results Accessors
    
    vector<double> CORE::jactempFll_vector() const {    
        vector<double> v = vector<double>(13);    
        v[0] = _jactempFll(0, 0);    
        v[1] = _jactempFll(1, 0);    
        v[2] = _jactempFll(2, 0);    
        v[3] = _jactempFll(3, 0);    
        v[4] = _jactempFll(4, 0);    
        v[5] = _jactempFll(5, 0);    
        v[6] = _jactempFll(6, 0);    
        v[7] = _jactempFll(7, 0);    
        v[8] = _jactempFll(8, 0);    
        v[9] = _jactempFll(9, 0);    
        v[10] = _jactempFll(10, 0);    
        v[11] = _jactempFll(11, 0);    
        v[12] = _jactempFll(12, 0);    
        return v;
    }
    vector<double> CORE::Gl_vector() const {    
        vector<double> v = vector<double>(13);    
        v[0] = _Gl(0, 0);    
        v[1] = _Gl(1, 0);    
        v[2] = _Gl(2, 0);    
        v[3] = _Gl(3, 0);    
        v[4] = _Gl(4, 0);    
        v[5] = _Gl(5, 0);    
        v[6] = _Gl(6, 0);    
        v[7] = _Gl(7, 0);    
        v[8] = _Gl(8, 0);    
        v[9] = _Gl(9, 0);    
        v[10] = _Gl(10, 0);    
        v[11] = _Gl(11, 0);    
        v[12] = _Gl(12, 0);    
        return v;
    }
    vector<double> CORE::jactempFnll_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = _jactempFnll(0, 0);    
        v[1] = _jactempFnll(1, 0);    
        return v;
    }
    vector<double> CORE::Gnl_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = _Gnl(0, 0);    
        v[1] = _Gnl(1, 0);    
        return v;
    }
    vector<double> CORE::jacGlnl_vector() const {    
        vector<double> v = vector<double>(13);    
        v[0] = _jacGlnl(0, 0);    
        v[1] = _jacGlnl(1, 0);    
        v[2] = _jacGlnl(2, 0);    
        v[3] = _jacGlnl(3, 0);    
        v[4] = _jacGlnl(4, 0);    
        v[5] = _jacGlnl(5, 0);    
        v[6] = _jacGlnl(6, 0);    
        v[7] = _jacGlnl(7, 0);    
        v[8] = _jacGlnl(8, 0);    
        v[9] = _jacGlnl(9, 0);    
        v[10] = _jacGlnl(10, 0);    
        v[11] = _jacGlnl(11, 0);    
        v[12] = _jacGlnl(12, 0);    
        return v;
    }
    vector<double> CORE::jacGnlnl_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = _jacGnlnl(0, 0);    
        v[1] = _jacGnlnl(1, 0);    
        return v;
    }
    vector<double> CORE::dxH_vector() const {    
        vector<double> v = vector<double>(14);    
        v[0] = _dxH(0, 0);    
        v[1] = _dxH(1, 0);    
        v[2] = _dxH(2, 0);    
        v[3] = _dxH(3, 0);    
        v[4] = _dxH(4, 0);    
        v[5] = _dxH(5, 0);    
        v[6] = _dxH(6, 0);    
        v[7] = _dxH(7, 0);    
        v[8] = _dxH(8, 0);    
        v[9] = _dxH(9, 0);    
        v[10] = _dxH(10, 0);    
        v[11] = _dxH(11, 0);    
        v[12] = _dxH(12, 0);    
        v[13] = _dxH(13, 0);    
        return v;
    }
    vector<double> CORE::z_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = _z(0, 0);    
        return v;
    }
    vector<double> CORE::y_vector() const {    
        vector<double> v = vector<double>(3);    
        v[0] = _y(0, 0);    
        v[1] = _y(1, 0);    
        v[2] = _y(2, 0);    
        return v;
    }
    
    // Oprations Results Accessors
    
    Matrix<double, 14, 1> CORE::ud_x() const {
        return _ud_x;
    }
    Matrix<double, 13, 13> CORE::ijactempFll() const {
        return _ijactempFll;
    }
    Matrix<double, 13, 1> CORE::ud_vl() const {
        return _ud_vl;
    }
    Matrix<double, 2, 1> CORE::Fnl() const {
        return _Fnl;
    }
    Matrix<double, 2, 2> CORE::jacFnl() const {
        return _jacFnl;
    }
    Matrix<double, 2, 2> CORE::ijacFnl() const {
        return _ijacFnl;
    }
    Matrix<double, 2, 1> CORE::save_Fnl() const {
        return _save_Fnl;
    }
    double CORE::res_Fnl() const {
        return _res_Fnl;
    }
    double CORE::step_Fnl() const {
        return _step_Fnl;
    }
    Matrix<double, 2, 1> CORE::ud_vnl() const {
        return _ud_vnl;
    }
    
    // Oprations Results Accessors
    
    vector<double> CORE::ud_x_vector() const {    
        vector<double> v = vector<double>(14);    
        v[0] = _ud_x(0, 0);    
        v[1] = _ud_x(1, 0);    
        v[2] = _ud_x(2, 0);    
        v[3] = _ud_x(3, 0);    
        v[4] = _ud_x(4, 0);    
        v[5] = _ud_x(5, 0);    
        v[6] = _ud_x(6, 0);    
        v[7] = _ud_x(7, 0);    
        v[8] = _ud_x(8, 0);    
        v[9] = _ud_x(9, 0);    
        v[10] = _ud_x(10, 0);    
        v[11] = _ud_x(11, 0);    
        v[12] = _ud_x(12, 0);    
        v[13] = _ud_x(13, 0);    
        return v;
    }
    vector<double> CORE::ud_vl_vector() const {    
        vector<double> v = vector<double>(13);    
        v[0] = _ud_vl(0, 0);    
        v[1] = _ud_vl(1, 0);    
        v[2] = _ud_vl(2, 0);    
        v[3] = _ud_vl(3, 0);    
        v[4] = _ud_vl(4, 0);    
        v[5] = _ud_vl(5, 0);    
        v[6] = _ud_vl(6, 0);    
        v[7] = _ud_vl(7, 0);    
        v[8] = _ud_vl(8, 0);    
        v[9] = _ud_vl(9, 0);    
        v[10] = _ud_vl(10, 0);    
        v[11] = _ud_vl(11, 0);    
        v[12] = _ud_vl(12, 0);    
        return v;
    }
    vector<double> CORE::Fnl_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = _Fnl(0, 0);    
        v[1] = _Fnl(1, 0);    
        return v;
    }
    vector<double> CORE::save_Fnl_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = _save_Fnl(0, 0);    
        v[1] = _save_Fnl(1, 0);    
        return v;
    }
    vector<double> CORE::ud_vnl_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = _ud_vnl(0, 0);    
        v[1] = _ud_vnl(1, 0);    
        return v;
    }
    
    // Default Constructor
    
    CORE::CORE(){
        init();
    };
    
    // Constructor with vector state initalization
    
    CORE::CORE(vector<double> & x0){
    
        if (x().size() == x0.size()) {
            set_x(x0);
        }
        else {
            cerr << "Size of x0 does not match size of x" << endl;
            exit(1);
        }
        init();
    };
    
    // Constructor with matrix state initalization
    
    CORE::CORE(Matrix<double, 14, 1> & x0){
    set_x(x0);
        init();
    };
    
    // Default Destructor
    
    CORE::~CORE(){
    };


// PRIVATE    
    
    // Functions Results Updates
    
    void CORE::jactempFll_update(){
    _jactempFll(6, 6) = 48000.0 - 0.5*(-1.0*(*beamA0) - 1.75373033806338e-5*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    )))/(*beamM0);
    _jactempFll(7, 6) = 4.19498055133178e-5*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM0);
    _jactempFll(8, 6) = 8.6168243681377e-5*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM0);
    _jactempFll(9, 6) = 0.000112101966510137*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM0);
    _jactempFll(10, 6) = 0.000107321349039606*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM0);
    _jactempFll(12, 6) = 0.00209387818297972*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM0);
    _jactempFll(6, 7) = 4.19498055133178e-5*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM1);
    _jactempFll(7, 7) = 48000.0 - 0.5*(-1.0*(*beamA1) - 0.000401381248738274*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    )))/(*beamM1);
    _jactempFll(8, 7) = 0.000412234536336943*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM1);
    _jactempFll(9, 7) = 0.000536303169386211*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM1);
    _jactempFll(10, 7) = 0.000513432381469775*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM1);
    _jactempFll(12, 7) = 0.0100172507298444*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM1);
    _jactempFll(6, 8) = 8.6168243681377e-5*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM2);
    _jactempFll(7, 8) = 0.000412234536336943*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM2);
    _jactempFll(8, 8) = 48000.0 - 0.5*(-1.0*(*beamA2) - 0.00169352518069168*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    )))/(*beamM2);
    _jactempFll(9, 8) = 0.00110160945018195*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM2);
    _jactempFll(10, 8) = 0.00105463102913199*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM2);
    _jactempFll(12, 8) = 0.0205762313160821*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM2);
    _jactempFll(6, 9) = 0.000112101966510137*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM3);
    _jactempFll(7, 9) = 0.000536303169386211*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM3);
    _jactempFll(8, 9) = 0.00110160945018195*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM3);
    _jactempFll(9, 9) = 48000.0 - 0.5*(-1.0*(*beamA3) - 0.00286631316632573*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    )))/(*beamM3);
    _jactempFll(10, 9) = 0.0013720392485365*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM3);
    _jactempFll(12, 9) = 0.0267689800250483*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM3);
    _jactempFll(6, 10) = 0.000107321349039606*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM4);
    _jactempFll(7, 10) = 0.000513432381469775*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM4);
    _jactempFll(8, 10) = 0.00105463102913199*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM4);
    _jactempFll(9, 10) = 0.0013720392485365*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM4);
    _jactempFll(10, 10) = 48000.0 - 0.5*(-1.0*(*beamA4) - 0.00262705655703032*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    )))/(*beamM4);
    _jactempFll(12, 10) = 0.0256274099209729*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*beamM4);
    _jactempFll(6, 12) = 0.00209387818297972*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*M);
    _jactempFll(7, 12) = 0.0100172507298444*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*M);
    _jactempFll(8, 12) = 0.0205762313160821*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*M);
    _jactempFll(9, 12) = 0.0267689800250483*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*M);
    _jactempFll(10, 12) = 0.0256274099209729*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*M);
    _jactempFll(12, 12) = 48000.0 + 0.5*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       (*A)*pow((*L), 2)*pow((*qfelt)/(*L), (*B))/((*B)*(*qfelt))
    ))/(*M);
    };
    void CORE::Gl_update(){
    _Gl(0, 0) = 1.0*(0.172000548672773*(*xbeamM0) + 0.822861919920328*(*xbeamM1) + 1.69022396085509*(*xbeamM2) + 2.19892412516885*(*xbeamM3) + 2.10515043487232*(*xbeamM4));
    _Gl(1, 0) = -41.0722433785536*(*xbeamM4);
    _Gl(2, 0) = -41.0722433785536*(*xbeamM3);
    _Gl(3, 0) = -41.0722433785536*(*xbeamM2);
    _Gl(4, 0) = -41.0722433785536*(*xbeamM1);
    _Gl(5, 0) = -41.0722433785536*(*xbeamM0);
    _Gl(6, 0) = 1.0*(3.48129858274146e-12*(*dxbeamM0) - 0.00418775636595944*(*uinput) + 2907.61765501279*(*xbeamK0) + 0.000720296392652923*(*xbeamM0)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.410722433785536*(*xbeamM0) + 0.00344594524345196*(*xbeamM1)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.00707824615196806*(*xbeamM2)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.00920855850343763*(*xbeamM3)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.00881585713493883*(*xbeamM4)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.0209387818297972*(*xmass)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) - 4.18775636595944e-19*(*xpickupobs) + 0.00418775636595944*(((*dqfelt) < -1.0e-16) ? (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       (((*qfelt) <= 0.0) ? (
          0
       )
       : (
          18144368465.0606*pow((*qfelt), 2.5)
       ))
    )
    : (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    ))));
    _Gl(7, 0) = 1.0*(2.15760742605653e-12*(*dxbeamM1) - 0.0200345014596888*(*uinput) + 114193.561881173*(*xbeamK1) + 0.00344594524345196*(*xbeamM0)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.0164856283357661*(*xbeamM1)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.730379247241894*(*xbeamM1) + 0.0338627944109522*(*xbeamM2)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.0440543485954402*(*xbeamM3)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.042175639460314*(*xbeamM4)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.100172507298444*(*xmass)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) - 2.00345014596888e-18*(*xpickupobs) + 0.0200345014596888*(((*dqfelt) < -1.0e-16) ? (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       (((*qfelt) <= 0.0) ? (
          0
       )
       : (
          18144368465.0606*pow((*qfelt), 2.5)
       ))
    )
    : (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    ))));
    _Gl(8, 0) = 1.0*(-1.3944401189292e-13*(*dxbeamM2) - 0.0411524626321643*(*uinput) + 895296.15923433*(*xbeamK2) + 0.00707824615196806*(*xbeamM0)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.0338627944109522*(*xbeamM1)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.0695568783890776*(*xbeamM2)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 1.29881837688999*(*xbeamM2) + 0.0904911428919755*(*xbeamM3)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.0866321246061675*(*xbeamM4)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.205762313160821*(*xmass)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) - 4.11524626321643e-18*(*xpickupobs) + 0.0411524626321643*(((*dqfelt) < -1.0e-16) ? (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       (((*qfelt) <= 0.0) ? (
          0
       )
       : (
          18144368465.0606*pow((*qfelt), 2.5)
       ))
    )
    : (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    ))));
    _Gl(9, 0) = 1.0*(-1.99817939972036e-12*(*dxbeamM3) - 0.0535379600500965*(*uinput) + 3437969.17264858*(*xbeamK3) + 0.00920855850343763*(*xbeamM0)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.0440543485954402*(*xbeamM1)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.0904911428919755*(*xbeamM2)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.117725911966483*(*xbeamM3)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 2.30966197700364*(*xbeamM3) + 0.112705459881638*(*xbeamM4)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.267689800250483*(*xmass)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) - 5.35379600500965e-18*(*xpickupobs) + 0.0535379600500965*(((*dqfelt) < -1.0e-16) ? (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       (((*qfelt) <= 0.0) ? (
          0
       )
       : (
          18144368465.0606*pow((*qfelt), 2.5)
       ))
    )
    : (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    ))));
    _Gl(10, 0) = 1.0*(-1.56674673235102e-12*(*dxbeamM4) - 0.0512548198419458*(*uinput) + 9394754.28587921*(*xbeamK4) + 0.00881585713493883*(*xbeamM0)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.042175639460314*(*xbeamM1)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.0866321246061675*(*xbeamM2)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.112705459881638*(*xbeamM3)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.107899106279575*(*xbeamM4)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 4.10722433785536*(*xbeamM4) + 0.256274099209729*(*xmass)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) - 5.12548198419458e-18*(*xpickupobs) + 0.0512548198419458*(((*dqfelt) < -1.0e-16) ? (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       (((*qfelt) <= 0.0) ? (
          0
       )
       : (
          18144368465.0606*pow((*qfelt), 2.5)
       ))
    )
    : (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    ))));
    _Gl(11, 0) = -1.0*(4.0e-5*(*uout)*(*wpickupobs)*pow((*xpickupobs), 5) + 1.0e-7*(*uout)*(*wpickupobs)*pow((*xpickupobs), 4) - 6.0e-11*(*uout)*(*wpickupobs)*pow((*xpickupobs), 3) - 1.9e-13*(*uout)*(*wpickupobs)*pow((*xpickupobs), 2) - 2.675e-16*(*uout)*(*wpickupobs)*(*xpickupobs) - 9.875e-20*(*uout)*(*wpickupobs) - 500000000.0*(*upickupMagnet)*pow((*xpickupobs), 8) - 2000000.0*(*upickupMagnet)*pow((*xpickupobs), 7) - 3500.0*(*upickupMagnet)*pow((*xpickupobs), 6) - 3.5*(*upickupMagnet)*pow((*xpickupobs), 5) - 0.0061875*(*upickupMagnet)*pow((*xpickupobs), 4) - 8.875e-6*(*upickupMagnet)*pow((*xpickupobs), 3) - 6.21875e-9*(*upickupMagnet)*pow((*xpickupobs), 2) - 2.03125e-12*(*upickupMagnet)*(*xpickupobs) - 8.251953125e-15*(*upickupMagnet))/((*wpickupobs)*(0.004*pow((*xpickupobs), 5) + 1.0e-5*pow((*xpickupobs), 4) - 6.0e-9*pow((*xpickupobs), 3) - 1.9e-11*pow((*xpickupobs), 2) - 2.67500000000003e-14*(*xpickupobs) - 9.875e-18));
    _Gl(12, 0) = 1.0*(-1.0e+16*(*wpickupobs) + 0.172000548672773*(*xbeamM0)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 0.822861919920328*(*xbeamM1)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 1.69022396085509*(*xbeamM2)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 2.19892412516885*(*xbeamM3)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 2.10515043487232*(*xbeamM4)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 5.0*(*xmass)*(((*qfelt) <= 0.0) ? (
       0.0
    )
    : (
       326.59863237109*pow((*qfelt), 1.5)
    )) + 1.0*(((*dqfelt) < -1.0e-16) ? (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       (((*qfelt) <= 0.0) ? (
          0
       )
       : (
          18144368465.0606*pow((*qfelt), 2.5)
       ))
    )
    : (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    ))));
    };
    void CORE::jactempFnll_update(){
    };
    void CORE::Gnl_update(){
    _Gnl(0, 0) = 1.0*(48000.0*(*dqfelt) - 0.172000548672773*(*xbeamM0) - 0.822861919920328*(*xbeamM1) - 1.69022396085509*(*xbeamM2) - 2.19892412516885*(*xbeamM3) - 2.10515043487232*(*xbeamM4) - 5.0*(*xmass));
    _Gnl(1, 0) = 1.0*(1.0*(*wpickupobs) + 5.0*(*xmass));
    };
    void CORE::jacGlnl_update(){
    _jacGlnl(6, 0) = 0.00418775636595944*(((*dqfelt) < -1.0e-16) ? (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       0
    )
    : (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    )));
    _jacGlnl(7, 0) = 0.0200345014596888*(((*dqfelt) < -1.0e-16) ? (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       0
    )
    : (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    )));
    _jacGlnl(8, 0) = 0.0411524626321643*(((*dqfelt) < -1.0e-16) ? (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       0
    )
    : (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    )));
    _jacGlnl(9, 0) = 0.0535379600500965*(((*dqfelt) < -1.0e-16) ? (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       0
    )
    : (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    )));
    _jacGlnl(10, 0) = 0.0512548198419458*(((*dqfelt) < -1.0e-16) ? (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       0
    )
    : (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    )));
    _jacGlnl(12, 0) = 1.0*(((*dqfelt) < -1.0e-16) ? (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       0
    )
    : (
       (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0
       )
       : (
          (*B)*(*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*B)*(*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*L)*((*B) + 1)*((*dqfelt)/(*L) + (*qfelt)/(*L))) + (*K)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/(*dqfelt) + (((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*qfelt)*pow((*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2) - (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          (*K)*(*dqfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1) + (*K)*(*qfelt)*pow((*dqfelt)/(*L) + (*qfelt)/(*L), (*B))/((*B) + 1)
       ))/pow((*dqfelt), 2)
    )));
    _jacGlnl(11, 1) = 0.5*(*upickupMagnet)*pow(pow((*pickup_Lh), 2) + pow((*pickup_Lv) - (*pickup_Rp) + (*xpickupobs), 2), 2)*pow(pow((*pickup_Lh), 2) + pow((*pickup_Lv) + (*pickup_Rp) + (*xpickupobs), 2), 2)/(pow((*pickup_Rb), 2)*(*pickup_Rp)*pow((*wpickupobs), 2)*((pow((*pickup_Lh), 2) - pow((*pickup_Lv) - (*pickup_Rp) + (*xpickupobs), 2))*pow(pow((*pickup_Lh), 2) + pow((*pickup_Lv) + (*pickup_Rp) + (*xpickupobs), 2), 2) - pow(pow((*pickup_Lh), 2) + pow((*pickup_Lv) - (*pickup_Rp) + (*xpickupobs), 2), 2)*(pow((*pickup_Lh), 2) - pow((*pickup_Lv) + (*pickup_Rp) + (*xpickupobs), 2))));
    };
    void CORE::jacGnlnl_update(){
    };
    void CORE::dxH_update(){
    _dxH(0, 0) = 2.02824096036517e+15*(2.46519032881566e-32*(*dxpickupobs) + 4.93038065763132e-32*(*xpickupobs));
    _dxH(1, 0) = 630471287684485.0*(7.45058059692383e-9*(*dxbeamK4) + 1.49011611938477e-8*(*xbeamK4));
    _dxH(2, 0) = 7.38298258059091e+15*(2.3283064365387e-10*(*dxbeamK3) + 4.65661287307739e-10*(*xbeamK3));
    _dxH(3, 0) = 7.69053544829171e+15*(5.82076609134674e-11*(*dxbeamK2) + 1.16415321826935e-10*(*xbeamK2));
    _dxH(4, 0) = 7.84732181909422e+15*(7.27595761418343e-12*(*dxbeamK1) + 1.45519152283669e-11*(*xbeamK1));
    _dxH(5, 0) = 99904981900417.0*(1.45519152283669e-11*(*dxbeamK0) + 2.91038304567337e-11*(*xbeamK0));
    _dxH(6, 0) = 1.0*(20.5361216892768*(*dxbeamM0) + 41.0722433785536*(*xbeamM0));
    _dxH(7, 0) = 1.0*(20.5361216892768*(*dxbeamM1) + 41.0722433785536*(*xbeamM1));
    _dxH(8, 0) = 1.0*(20.5361216892768*(*dxbeamM2) + 41.0722433785536*(*xbeamM2));
    _dxH(9, 0) = 1.0*(20.5361216892768*(*dxbeamM3) + 41.0722433785536*(*xbeamM3));
    _dxH(10, 0) = 1.0*(20.5361216892768*(*dxbeamM4) + 41.0722433785536*(*xbeamM4));
    _dxH(11, 0) = 8.32963354375758e+15*(1.81898940354586e-12*(*dxpickupCcoil) + 3.63797880709171e-12*(*xpickupCcoil));
    _dxH(12, 0) = 5.0*(0.5*(*dxmass) + 1.0*(*xmass));
    _dxH(13, 0) = (((*dqfelt) < -1.0e-16) ? (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )
    : (((*dqfelt) < 1.0e-16) ? (
       (((*qfelt) <= 0.0) ? (
          0
       )
       : (
          18144368465.0606*pow((*qfelt), 2.5)
       ))
    )
    : (
       -(((*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          5184105275.73159*pow((*qfelt), 3.5)
       ))/(*dqfelt) + (((*dqfelt) + (*qfelt) <= 0.0) ? (
          0.0
       )
       : (
          142857.142857143*(*dqfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5) + 142857.142857143*(*qfelt)*pow(66.6666666666667*(*dqfelt) + 66.6666666666667*(*qfelt), 2.5)
       ))/(*dqfelt)
    )));
    };
    void CORE::z_update(){
    _z(0, 0) = 1.0e+16*(*wpickupobs);
    };
    void CORE::y_update(){
    _y(0, 0) = -1.0*(0.0860002743363867*(*dxbeamM0) + 0.411430959960164*(*dxbeamM1) + 0.845111980427543*(*dxbeamM2) + 1.09946206258442*(*dxbeamM3) + 1.05257521743616*(*dxbeamM4) + 0.172000548672773*(*xbeamM0) + 0.822861919920327*(*xbeamM1) + 1.69022396085509*(*xbeamM2) + 2.19892412516885*(*xbeamM3) + 2.10515043487232*(*xbeamM4));
    _y(1, 0) = -333185341750303.0*(4.54747350886464e-13*(*dxpickupCcoil) + 9.09494701772928e-13*(*xpickupCcoil));
    _y(2, 0) = 3.78787878787879e+15*(0.5*(*dxpickupCcoil) + 1.0*(*xpickupCcoil))*pow(1.0*pow((*xpickupobs), 2) - 0.001*(*xpickupobs) + 1.25e-6, 2)*pow(1.0*pow((*xpickupobs), 2) + 0.003*(*xpickupobs) + 3.25e-6, 2)/((*wpickupobs)*(1.0*(*xpickupobs) + 0.0005)*(1.0*pow((*xpickupobs), 4) + 0.002*pow((*xpickupobs), 3) - 2.5e-6*pow((*xpickupobs), 2) - 3.5e-9*(*xpickupobs) - 4.9375e-12));
    };
    
    // Oprations Results Updates
    
    void CORE::ud_x_update(){
        _ud_x = (x()) + (dx());
    };
    void CORE::ijactempFll_update(){
        _ijactempFll = (jactempFll()).inverse();
    };
    void CORE::ud_vl_update(){
        _ud_vl = (ijactempFll())*((-1.0)*(Gl()));
    };
    void CORE::Fnl_update(){
        _Fnl = (Gnl()) + ((jactempFnll())*((ijactempFll())*((-1)*(Gl()))));
    };
    void CORE::jacFnl_update(){
        _jacFnl = (jacGnlnl()) + ((jactempFnll())*((ijactempFll())*((-1)*(jacGlnl()))));
    };
    void CORE::ijacFnl_update(){
        _ijacFnl = (jacFnl()).inverse();
    };
    void CORE::save_Fnl_update(){
        _save_Fnl = Fnl();
    };
    void CORE::res_Fnl_update(){
        _res_Fnl = sqrt((Fnl()).dot(Fnl()));
    };
    void CORE::step_Fnl_update(){
        _step_Fnl = sqrt(((Fnl()) + ((-1.0)*(save_Fnl()))).dot((Fnl()) + ((-1.0)*(save_Fnl()))));
    };
    void CORE::ud_vnl_update(){
        _ud_vnl = (vnl()) + ((-1.0)*((ijacFnl())*(Fnl())));
    };
    
    // Initialization
    
    void CORE::init(){
        
        
        // Functions Results Initialisation Data
        double jactempFll_data[] = {48000.0000000000, 0, 0, 0, 0, 0, -0.00209387818297972*(*Cpickupobs), -0.0100172507298444*(*Cpickupobs), -0.0205762313160821*(*Cpickupobs), -0.0267689800250483*(*Cpickupobs), -0.0256274099209729*(*Cpickupobs), 0, 0, 0, 48000.0000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0.5*(*beamK4), 0, 0, 0, 0, 48000.0000000000, 0, 0, 0, 0, 0, 0, 0.5*(*beamK3), 0, 0, 0, 0, 0, 0, 48000.0000000000, 0, 0, 0, 0, 0.5*(*beamK2), 0, 0, 0, 0, 0, 0, 0, 0, 48000.0000000000, 0, 0, 0.5*(*beamK1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48000.0000000000, 0.5*(*beamK0), 0, 0, 0, 0, 0, 0, 0.00209387818297972/(*beamM0), 0, 0, 0, 0, -0.5/(*beamM0), 0, 0, 0, 0, 0, 0, 0, 0.0100172507298444/(*beamM1), 0, 0, 0, -0.5/(*beamM1), 0, 0, 0, 0, 0, 0, 0, 0, 0.0205762313160821/(*beamM2), 0, 0, -0.5/(*beamM2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0267689800250483/(*beamM3), 0, -0.5/(*beamM3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0256274099209729/(*beamM4), -0.5/(*beamM4), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48000.0000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        double Gl_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        double jactempFnll_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.00209387818297972/(*beamM0), 0, -0.0100172507298444/(*beamM1), 0, -0.0205762313160821/(*beamM2), 0, -0.0267689800250483/(*beamM3), 0, -0.0256274099209729/(*beamM4), 0, 0, 0, -0.5/(*M), 0.5/(*M)};
        double Gnl_data[] = {0, 0};
        double jacGlnl_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.0/(*Rpickupobs)};
        double jacGnlnl_data[] = {48000.0000000000, 0, 0, 1};
        double dxH_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        double z_data[] = {0};
        double y_data[] = {0, 0, 0};
        
        // Oprations Results Initialisation Data
        double ud_x_data[] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
        double ijactempFll_data[] = {2.08333333333e-05, 4.56739457065e-31, 4.8956748566e-31, 3.80561904619e-31, 1.85916953735e-31, 3.88811089486e-32, 9.08785630398e-29, 4.34552050008e-28, 8.89504439938e-28, 1.14428808259e-27, 1.06755765625e-27, 0.0, 0.0, 4.29095497179e-08, 1.99961525599e-05, 1.00834177758e-33, 7.83827518416e-34, 3.82925412945e-34, 8.00818021207e-35, 1.87178794514e-31, 8.95028774151e-31, 1.83207527951e-30, 2.35684254583e-30, -0.00195678023987, 0.0, 0.0, 1.68311792363e-08, 3.68998255975e-34, 2.05189549143e-05, 3.07454670103e-34, 1.50201675426e-34, 3.14119158537e-35, 7.34204823965e-32, 3.51073125177e-31, 7.18627615684e-31, -0.000734810805062, 8.62476204358e-31, 0.0, 0.0, 3.40715611557e-09, 7.46967664492e-35, 8.00655769319e-35, 2.07505398406e-05, 3.04055081235e-35, 6.35875239044e-36, 1.48625976881e-32, 7.10681603863e-32, -0.000193516950812, 1.87140870651e-31, 1.74592108666e-31, 0.0, 0.0, 2.12305191611e-10, 4.65447158152e-36, 4.98901050478e-36, 3.87817286784e-36, 2.08227363543e-05, 3.96223741698e-37, 9.26111555495e-34, -2.47687952271e-05, 9.06462770687e-33, 1.16610384304e-32, 1.08791055728e-32, 0.0, 0.0, 1.13051398825e-12, 2.47848165695e-38, 2.65662187552e-38, 2.06510667153e-38, 1.00887224088e-38, 2.08330633764e-05, -6.30982538776e-07, 2.35808242156e-35, 4.82686661743e-35, 6.20944168301e-35, 5.79306654557e-35, 0.0, 0.0, -3.73258645906e-11, -8.18313366124e-37, -8.7712942453e-37, -6.81830501768e-37, -3.3309652993e-37, 8.91309363029e-09, 2.08329742454e-05, -7.78561486856e-34, -1.59367306934e-33, -2.05015401713e-33, -1.91268060096e-33, 0.0, 0.0, -1.78480275586e-10, -3.91291124005e-36, -4.1941507084e-36, -3.26029409346e-36, 8.90864571523e-09, -3.3309652993e-37, -7.78561486856e-34, 2.08225779337e-05, -7.62043188359e-33, -9.80317691185e-33, -9.14582326518e-33, 0.0, 0.0, -3.65339428434e-10, -8.009516745e-36, -8.58519865877e-36, 8.87770512545e-09, -3.26029409346e-36, -6.81830501768e-37, -1.59367306934e-33, -7.62043188359e-33, 2.07502591029e-05, -2.00665705948e-32, -1.87210033899e-32, 0.0, 0.0, -4.69984786234e-10, -1.03037086125e-35, 8.77853369448e-09, -8.58519865877e-36, -4.1941507084e-36, -8.7712942453e-37, -2.05015401713e-33, -9.80317691185e-33, -2.00665705948e-32, 2.05184612611e-05, -2.40833211295e-32, 0.0, 0.0, -4.38469878782e-10, 8.55470529667e-09, -1.03037086125e-35, -8.009516745e-36, -3.91291124005e-36, -8.18313366124e-37, -1.91268060096e-33, -9.14582326518e-33, -1.87210033899e-32, -2.40833211295e-32, 1.99952970894e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 2.08333333333e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 2.08333333333e-05};
        double ud_vl_data[] = {nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan};
        double Fnl_data[] = {nan, nan};
        double jacFnl_data[] = {48000.0, 0.0, nan, nan};
        double ijacFnl_data[] = {nan, nan, nan, nan};
        double save_Fnl_data[] = {nan, nan};
        double res_Fnl_data = 0.;
        double step_Fnl_data = 0.;
        double ud_vnl_data[] = {nan, nan};    
        
        // Functions Results Initialisation
        
        _jactempFll = Map<Matrix<double, 13, 13>> (jactempFll_data);
        _Gl = Map<Matrix<double, 13, 1>> (Gl_data);
        _jactempFnll = Map<Matrix<double, 2, 13>> (jactempFnll_data);
        _Gnl = Map<Matrix<double, 2, 1>> (Gnl_data);
        _jacGlnl = Map<Matrix<double, 13, 2>> (jacGlnl_data);
        _jacGnlnl = Map<Matrix<double, 2, 2>> (jacGnlnl_data);
        _dxH = Map<Matrix<double, 14, 1>> (dxH_data);
        _z = Map<Matrix<double, 1, 1>> (z_data);
        _y = Map<Matrix<double, 3, 1>> (y_data);
        
        // Operations Results Initialisation
        
        _ud_x = Map<Matrix<double, 14, 1>> (ud_x_data);
        _ijactempFll = Map<Matrix<double, 13, 13>> (ijactempFll_data);
        _ud_vl = Map<Matrix<double, 13, 1>> (ud_vl_data);
        _Fnl = Map<Matrix<double, 2, 1>> (Fnl_data);
        _jacFnl = Map<Matrix<double, 2, 2>> (jacFnl_data);
        _ijacFnl = Map<Matrix<double, 2, 2>> (ijacFnl_data);
        _save_Fnl = Map<Matrix<double, 2, 1>> (save_Fnl_data);
        _res_Fnl = res_Fnl_data;
        _step_Fnl = step_Fnl_data;
        _ud_vnl = Map<Matrix<double, 2, 1>> (ud_vnl_data);
    };