/*
    Copyright or (c) or Copr. Project-Team S3 (Sound Signals and Systems) and
    Analysis/Synthesis team, Laboratory of Sciences and Technologies of Music and
    Sound (UMR 9912), IRCAM-CNRS-UPMC, 1 place Igor Stravinsky, F-75004 Paris
    * contributors : Antoine Falaize, Thomas Helie,
    * corresponding contributor: antoine.falaize@ircam.fr
    * date: 2016/12/31 12:47:34

    This has been geerated by PyPHS which purpose is to generate C++
    code for the simulation of multiphysics system described by graph structures.

    This software is governed by the CeCILL-B license under French law and
    abiding by the rules of distribution of free software.  You can  use,
    modify and/ or redistribute the software under the terms of the CeCILL-B
    license as circulated by CEA, CNRS and INRIA at the following URL
    "http://www.cecill.info".

    As a counterpart to the access to the source code and  rights to copy,
    modify and redistribute granted by the license, users are provided only
    with a limited warranty  and the software's author,  the holder of the
    economic rights, and the successive licensors  have only  limited liability.

    In this respect, the user's attention is drawn to the risks associated
    with loading,  using,  modifying and/or developing or reproducing the
    software by the user in light of its specific status of free software,
    that may mean  that it is complicated to manipulate,  and  that  also
    therefore means  that it is reserved for developers  and  experienced
    professionals having in-depth computer knowledge. Users are therefore
    encouraged to load and test the software's suitability as regards their
    requirements in conditions enabling the security of their systems and/or
    data to be ensured and,  more generally, to use and operate it in the
    same conditions as regards security.

    The fact that you are presently reading this means that you have had
    knowledge of the CeCILL-B license and that you accept its terms.

    Created on 2016/12/31 12:47:34

    author: Antoine Falaize


===========================================================================

    This file was automatically generated by PyPHS, date 2018/03/04.

    It contains the code for the simulation of system 'PHSCORE'.

===========================================================================
*/

#include "core.h"
//==========================================================================
// PUBLIC    
    //==========================================================================
    // Sample Rate
    void PHSCORE::set_sampleRate(float & value) {
        sampleRate = value;
        init();
    }
    void PHSCORE::set_sampleRate(double & value) {
        sampleRate = value;
        init();
    }
    //==========================================================================
    // Core update
    void PHSCORE::update(){    
        ud_x_update();
        set_x(_ud_x);
        ud_o_update();
        set_o(_ud_o);
        jactempFll_update();
        ijactempFll_update();
        Gl_update();    
        ud_vl_update();
        set_vl(_ud_vl);
        dxH_update();
        z_update();
        y_update();
    }
    //==========================================================================
    // Acessors to Arguments, return vector<double>
    vector<double> PHSCORE::x_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = *xL;    
        v[1] = *xC;    
        return v;
    }
    vector<double> PHSCORE::dx_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = *dxL;    
        v[1] = *dxC;    
        return v;
    }
    vector<double> PHSCORE::w_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = *wR;    
        return v;
    }
    vector<double> PHSCORE::u_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = *uin;    
        return v;
    }
    vector<double> PHSCORE::p_vector() const {    
        vector<double> v = vector<double>(0);    
        return v;
    }
    vector<double> PHSCORE::vl_vector() const {    
        vector<double> v = vector<double>(3);    
        v[0] = *dxL;    
        v[1] = *dxC;    
        v[2] = *wR;    
        return v;
    }
    vector<double> PHSCORE::o_vector() const {    
        vector<double> v = vector<double>(0);    
        return v;
    }
    //==========================================================================
    // Acessors to Arguments, return Matrix<double, n, m>
    Matrix<double,2, 1> PHSCORE::x() const {    
        Matrix<double,2, 1> m;    
        m(0, 0) = *xL;    
        m(1, 0) = *xC;    
        return m;
    }
    Matrix<double,2, 1> PHSCORE::dx() const {    
        Matrix<double,2, 1> m;    
        m(0, 0) = *dxL;    
        m(1, 0) = *dxC;    
        return m;
    }
    Matrix<double,1, 1> PHSCORE::w() const {    
        Matrix<double,1, 1> m;    
        m(0, 0) = *wR;    
        return m;
    }
    Matrix<double,1, 1> PHSCORE::u() const {    
        Matrix<double,1, 1> m;    
        m(0, 0) = *uin;    
        return m;
    }
    Matrix<double,0, 0> PHSCORE::p() const {    
        Matrix<double,0, 0> m;    
        return m;
    }
    Matrix<double,3, 1> PHSCORE::vl() const {    
        Matrix<double,3, 1> m;    
        m(0, 0) = *dxL;    
        m(1, 0) = *dxC;    
        m(2, 0) = *wR;    
        return m;
    }
    Matrix<double,0, 0> PHSCORE::o() const {    
        Matrix<double,0, 0> m;    
        return m;
    }
    //==========================================================================
    // Mutators for Arguments, type = vector<double>
    void PHSCORE::set_x(vector<double> & v) {
        *xL = v[0];
        *xC = v[1];
    }
    void PHSCORE::set_dx(vector<double> & v) {
        *dxL = v[0];
        *dxC = v[1];
    }
    void PHSCORE::set_w(vector<double> & v) {
        *wR = v[0];
    }
    void PHSCORE::set_u(vector<double> & v) {
        *uin = v[0];
    }
    void PHSCORE::set_p(vector<double> & v) {
    }
    void PHSCORE::set_vl(vector<double> & v) {
        *dxL = v[0];
        *dxC = v[1];
        *wR = v[2];
    }
    void PHSCORE::set_o(vector<double> & v) {
    }
    //==========================================================================
    // Mutators for Arguments, type = Matrix<double, n, m>
    void PHSCORE::set_x(Matrix<double, 2, 1> & m) {
        *xL = m(0, 0);
        *xC = m(1, 0);
    }
    void PHSCORE::set_dx(Matrix<double, 2, 1> & m) {
        *dxL = m(0, 0);
        *dxC = m(1, 0);
    }
    void PHSCORE::set_w(Matrix<double, 1, 1> & m) {
        *wR = m(0, 0);
    }
    void PHSCORE::set_u(Matrix<double, 1, 1> & m) {
        *uin = m(0, 0);
    }
    void PHSCORE::set_p(Matrix<double, 0, 0> & m) {
    }
    void PHSCORE::set_vl(Matrix<double, 3, 1> & m) {
        *dxL = m(0, 0);
        *dxC = m(1, 0);
        *wR = m(2, 0);
    }
    void PHSCORE::set_o(Matrix<double, 0, 0> & m) {
    }
    //==========================================================================
    // Mutators for a single argument, types are double with int index
    void PHSCORE::set_x(double & value, unsigned int & index) {
        if(index == 0) {
            *xL = value;
        }
        else if(index == 1) {
            *xC = value;
        }
    }
    void PHSCORE::set_dx(double & value, unsigned int & index) {
        if(index == 0) {
            *dxL = value;
        }
        else if(index == 1) {
            *dxC = value;
        }
    }
    void PHSCORE::set_w(double & value, unsigned int & index) {
        if(index == 0) {
            *wR = value;
        }
    }
    void PHSCORE::set_u(double & value, unsigned int & index) {
        if(index == 0) {
            *uin = value;
        }
    }
    void PHSCORE::set_p(double & value, unsigned int & index) {
    }
    void PHSCORE::set_vl(double & value, unsigned int & index) {
        if(index == 0) {
            *dxL = value;
        }
        else if(index == 1) {
            *dxC = value;
        }
        else if(index == 2) {
            *wR = value;
        }
    }
    void PHSCORE::set_o(double & value, unsigned int & index) {
    }
    //==========================================================================
    // Functions Results Accessors (matrix)
    Matrix<double,0, 0> PHSCORE::ud_o() const {
        return _ud_o;
    }
    Matrix<double,3, 3> PHSCORE::jactempFll() const {
        return _jactempFll;
    }
    Matrix<double,3, 1> PHSCORE::Gl() const {
        return _Gl;
    }
    Matrix<double,2, 1> PHSCORE::dxH() const {
        return _dxH;
    }
    Matrix<double,1, 1> PHSCORE::z() const {
        return _z;
    }
    Matrix<double,1, 1> PHSCORE::y() const {
        return _y;
    }
    //==========================================================================
    // Functions Results Accessors (vector)
    vector<double> PHSCORE::ud_o_vector() const {    
        vector<double> v = vector<double>(0);    
        return v;
    }
    vector<double> PHSCORE::jactempFll_vector() const {    
        vector<double> v = vector<double>(3);    
        v[0] = _jactempFll(0, 0);    
        v[1] = _jactempFll(1, 0);    
        v[2] = _jactempFll(2, 0);    
        return v;
    }
    vector<double> PHSCORE::Gl_vector() const {    
        vector<double> v = vector<double>(3);    
        v[0] = _Gl(0, 0);    
        v[1] = _Gl(1, 0);    
        v[2] = _Gl(2, 0);    
        return v;
    }
    vector<double> PHSCORE::dxH_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = _dxH(0, 0);    
        v[1] = _dxH(1, 0);    
        return v;
    }
    vector<double> PHSCORE::z_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = _z(0, 0);    
        return v;
    }
    vector<double> PHSCORE::y_vector() const {    
        vector<double> v = vector<double>(1);    
        v[0] = _y(0, 0);    
        return v;
    }
    //==========================================================================
    // Functions Results Accessors (element)
    double PHSCORE::ud_o(unsigned int & index) const {    
        return _ud_o(index, 0);
    }
    double PHSCORE::jactempFll(unsigned int & index) const {    
        return _jactempFll(index, 0);
    }
    double PHSCORE::Gl(unsigned int & index) const {    
        return _Gl(index, 0);
    }
    double PHSCORE::dxH(unsigned int & index) const {    
        return _dxH(index, 0);
    }
    double PHSCORE::z(unsigned int & index) const {    
        return _z(index, 0);
    }
    double PHSCORE::y(unsigned int & index) const {    
        return _y(index, 0);
    }
    //==========================================================================
    // Oprations Results Accessors
    Matrix<double,2, 1> PHSCORE::ud_x() const {
        return _ud_x;
    }
    Matrix<double,3, 3> PHSCORE::ijactempFll() const {
        return _ijactempFll;
    }
    Matrix<double,3, 1> PHSCORE::ud_vl() const {
        return _ud_vl;
    }
    //==========================================================================
    // Oprations Results Accessors
    vector<double> PHSCORE::ud_x_vector() const {    
        vector<double> v = vector<double>(2);    
        v[0] = _ud_x(0, 0);    
        v[1] = _ud_x(1, 0);    
        return v;
    }
    vector<double> PHSCORE::ud_vl_vector() const {    
        vector<double> v = vector<double>(3);    
        v[0] = _ud_vl(0, 0);    
        v[1] = _ud_vl(1, 0);    
        v[2] = _ud_vl(2, 0);    
        return v;
    }
    //==========================================================================
    // Default Constructor
    PHSCORE::PHSCORE(){    
        //==========================================================================
        // Functions Results Initialisation Data
        double ud_o_data[] = {};
        double jactempFll_data[] = {(*F_S), -0.5/(*L), -0.5/(*L), 0.5/(*C), (*F_S), 0., 1.0*(*R), 0., 1};
        double Gl_data[] = {0., 0., 0.};
        double dxH_data[] = {0., 0.};
        double z_data[] = {0.};
        double y_data[] = {0.};    
        //==========================================================================
        // Functions Results Initialisation    
        _ud_o = Map<Matrix<double,0, 0>> (ud_o_data);    
        _jactempFll = Map<Matrix<double,3, 3>> (jactempFll_data);    
        _Gl = Map<Matrix<double,3, 1>> (Gl_data);    
        _dxH = Map<Matrix<double,2, 1>> (dxH_data);    
        _z = Map<Matrix<double,1, 1>> (z_data);    
        _y = Map<Matrix<double,1, 1>> (y_data);    
        //==========================================================================
        // Initialization    
        init();
    };
    //==========================================================================
    // Default Destructor
    PHSCORE::~PHSCORE(){
    };

//==========================================================================
// PRIVATE    
    //==========================================================================
    // Functions Results Updates
    void PHSCORE::ud_o_update(){
    };
    void PHSCORE::jactempFll_update(){
    };
    void PHSCORE::Gl_update(){
    _Gl(0, 0) = 1.0*(*uin) - 0.5*(*dxC)/(*C) + 1.0*(0.5*(*dxC) + (*xC))/(*C);
    _Gl(1, 0) = 0.5*(*dxL)/(*L) - 1.0*(0.5*(*dxL) + (*xL))/(*L);
    _Gl(2, 0) = 0.5*(*dxL)/(*L) - 1.0*(0.5*(*dxL) + (*xL))/(*L);
    };
    void PHSCORE::dxH_update(){
    _dxH(0, 0) = 1.0*(0.5*(*dxL) + (*xL))/(*L);
    _dxH(1, 0) = 1.0*(0.5*(*dxC) + (*xC))/(*C);
    };
    void PHSCORE::z_update(){
    _z(0, 0) = (*R)*(*wR);
    };
    void PHSCORE::y_update(){
    _y(0, 0) = 1.0*(0.5*(*dxL) + (*xL))/(*L);
    };
    //==========================================================================
    // Oprations Results Updates
    void PHSCORE::ud_x_update(){
        _ud_x = (x()) + (dx());
    };
    void PHSCORE::ijactempFll_update(){
        _ijactempFll = (jactempFll()).inverse();
    };
    void PHSCORE::ud_vl_update(){
        _ud_vl = (ijactempFll())*((-1.0)*(Gl()));
    };
    //==========================================================================
    // Initialization
    void PHSCORE::init(){    
        //==========================================================================
        // Arguments Initialisation Data
        vector<double> x_data = {0., 0.};
        vector<double> dx_data = {0., 0.};
        vector<double> w_data = {0.};
        vector<double> u_data = {0.};
        vector<double> p_data = {};
        vector<double> o_data = {};
        //==========================================================================
        // Arguments Initialisation
        set_x(x_data);
        set_dx(dx_data);
        set_w(w_data);
        set_u(u_data);
        set_p(p_data);
        set_o(o_data);
        //==========================================================================
        // Functions Results Initialisation
        ud_o_update();
        jactempFll_update();
        Gl_update();
        dxH_update();
        z_update();
        y_update();
        //==========================================================================
        // Operations Results Initialisation
        ud_x_update();
        ijactempFll_update();
        ud_vl_update();
    };