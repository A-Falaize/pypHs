<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>PyPHS (tutorial)</title><link>https://afalaize.github.io/pyphs/</link><description></description><atom:link href="https://afalaize.github.io/pyphs/categories/cat_tutorial.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Wed, 08 Mar 2017 02:00:55 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Port-Hamiltonian Systems</title><link>https://afalaize.github.io/pyphs/posts/port-hamiltonian-systems/</link><dc:creator>afalaize</dc:creator><description>&lt;div&gt;&lt;p&gt;In this tutorial, we recall the &lt;em&gt;port-Hamiltonian systems (PHS)&lt;/em&gt; formalism in section 1, and we give an example with the standard serial resistor-coil-capacitor (RLC) circuit in section 2.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://afalaize.github.io/pyphs/posts/port-hamiltonian-systems/"&gt; click to read the rest of the article …&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>mathjax</category><category>theory</category><guid>https://afalaize.github.io/pyphs/posts/port-hamiltonian-systems/</guid><pubDate>Sat, 11 Feb 2017 17:19:33 GMT</pubDate></item><item><title>The PHSSimulation class</title><link>https://afalaize.github.io/pyphs/posts/phssimulation/</link><dc:creator>afalaize</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In this tutorial, we cover the &lt;code&gt;pyphs.PHSSimulation&lt;/code&gt; object for the numerical simulation of &lt;code&gt;pyphs.PHSCore&lt;/code&gt; objects. The core object from the previous tutorial on &lt;a href="https://afalaize.github.io/pyphs/posts/phscore/"&gt;&lt;code&gt;pyphs.PHSCore&lt;/code&gt;&lt;/a&gt; is used as an example.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://afalaize.github.io/pyphs/posts/phssimulation/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>mathjax</category><guid>https://afalaize.github.io/pyphs/posts/phssimulation/</guid><pubDate>Sat, 05 Nov 2016 14:30:35 GMT</pubDate></item><item><title>The PHSNumericalEval class</title><link>https://afalaize.github.io/pyphs/posts/phsnumericaleval/</link><dc:creator>afalaize</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In this tutorial, we cover the &lt;code&gt;pyphs.PHSNumericalEval&lt;/code&gt; object for the numerical evaluation of &lt;code&gt;pyphs.PHSCore&lt;/code&gt; objects. The core object from the previous tutorial on &lt;a href="https://afalaize.github.io/pyphs/posts/phscore/"&gt;&lt;code&gt;pyphs.PHSCore&lt;/code&gt;&lt;/a&gt; is used as an example.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://afalaize.github.io/pyphs/posts/phsnumericaleval/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>mathjax</category><guid>https://afalaize.github.io/pyphs/posts/phsnumericaleval/</guid><pubDate>Sat, 05 Nov 2016 14:30:34 GMT</pubDate></item><item><title>System declaration: the PHSCore class</title><link>https://afalaize.github.io/pyphs/posts/phscore/</link><dc:creator>afalaize</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In this tutorial, we firstly recall the &lt;em&gt;port-Hamiltonian systems (PHS)&lt;/em&gt; formalism in parallel with a description of the &lt;code&gt;pyphs.PHSCore&lt;/code&gt; object. Secondly, we build the &lt;code&gt;pyphs.PHSCore&lt;/code&gt; object associated with a nonlinear serial RLC-like circuit with a linear coil, a nonlinear capacitor, and a modulated resistor.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://afalaize.github.io/pyphs/posts/phscore/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>mathjax</category><guid>https://afalaize.github.io/pyphs/posts/phscore/</guid><pubDate>Sat, 05 Nov 2016 14:30:33 GMT</pubDate></item></channel></rss>